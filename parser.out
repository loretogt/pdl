Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    asig
    STRING
    INT
    BOOLEAN

Grammar

Rule 0     S' -> P
Rule 1     P -> D P
Rule 2     P -> F P
Rule 3     P -> S P
Rule 4     P -> SC P
Rule 5     P -> empty
Rule 6     D -> VAR T id puntcoma
Rule 7     F -> FUNCTION T1 id parentA A parentC corcheteA C corcheteC
Rule 8     F -> empty
Rule 9     T1 -> T
Rule 10    T1 -> empty
Rule 11    A -> empty
Rule 12    A -> T id A1
Rule 13    A1 -> empty
Rule 14    A1 -> coma T id A1
Rule 15    C -> D C
Rule 16    C -> SC
Rule 17    C -> empty
Rule 18    S -> IF parentA E parentC S
Rule 19    S -> id igual E puntcoma
Rule 20    S -> PRINT parentA E parentC puntcoma
Rule 21    S -> INPUT parentA E parentC puntcoma
Rule 22    S -> id parentA L parentC puntcoma
Rule 23    S -> RETURN X
Rule 24    L -> empty
Rule 25    L -> id L1
Rule 26    L1 -> empty
Rule 27    L1 -> coma id L1
Rule 28    X -> E
Rule 29    X -> empty
Rule 30    SC -> WHILE parentA E parentC corcheteA C corcheteC
Rule 31    SC -> empty
Rule 32    E -> E or T
Rule 33    E -> T
Rule 34    T -> T menor U
Rule 35    T -> U
Rule 36    U -> U suma V
Rule 37    U -> V
Rule 38    V -> id
Rule 39    V -> entero
Rule 40    V -> cadena
Rule 41    V -> parentA E parentC
Rule 42    V -> id parentA L parentC
Rule 43    empty -> <empty>

Terminals, with rules where they appear

BOOLEAN              : 
FUNCTION             : 7
IF                   : 18
INPUT                : 21
INT                  : 
PRINT                : 20
RETURN               : 23
STRING               : 
VAR                  : 6
WHILE                : 30
asig                 : 
cadena               : 40
coma                 : 14 27
corcheteA            : 7 30
corcheteC            : 7 30
entero               : 39
error                : 
id                   : 6 7 12 14 19 22 25 27 38 42
igual                : 19
menor                : 34
or                   : 32
parentA              : 7 18 20 21 22 30 41 42
parentC              : 7 18 20 21 22 30 41 42
puntcoma             : 6 19 20 21 22
suma                 : 36

Nonterminals, with rules where they appear

A                    : 7
A1                   : 12 14
C                    : 7 15 30
D                    : 1 15
E                    : 18 19 20 21 28 30 32 41
F                    : 2
L                    : 22 42
L1                   : 25 27
P                    : 1 2 3 4 0
S                    : 3 18
SC                   : 4 16
T                    : 6 9 12 14 32 33 34
T1                   : 7
U                    : 34 35 36
V                    : 36 37
X                    : 23
empty                : 5 8 10 11 13 17 24 26 29 31

Parsing method: LALR

state 0

    (0) S' -> . P
    (1) P -> . D P
    (2) P -> . F P
    (3) P -> . S P
    (4) P -> . SC P
    (5) P -> . empty
    (6) D -> . VAR T id puntcoma
    (7) F -> . FUNCTION T1 id parentA A parentC corcheteA C corcheteC
    (8) F -> . empty
    (18) S -> . IF parentA E parentC S
    (19) S -> . id igual E puntcoma
    (20) S -> . PRINT parentA E parentC puntcoma
    (21) S -> . INPUT parentA E parentC puntcoma
    (22) S -> . id parentA L parentC puntcoma
    (23) S -> . RETURN X
    (30) SC -> . WHILE parentA E parentC corcheteA C corcheteC
    (31) SC -> . empty
    (43) empty -> .

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for id resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for INPUT resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    VAR             shift and go to state 11
    FUNCTION        shift and go to state 6
    IF              shift and go to state 13
    id              shift and go to state 4
    PRINT           shift and go to state 2
    INPUT           shift and go to state 12
    RETURN          shift and go to state 3
    WHILE           shift and go to state 1
    $end            reduce using rule 43 (empty -> .)

  ! VAR             [ reduce using rule 43 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 43 (empty -> .) ]
  ! IF              [ reduce using rule 43 (empty -> .) ]
  ! id              [ reduce using rule 43 (empty -> .) ]
  ! PRINT           [ reduce using rule 43 (empty -> .) ]
  ! INPUT           [ reduce using rule 43 (empty -> .) ]
  ! RETURN          [ reduce using rule 43 (empty -> .) ]
  ! WHILE           [ reduce using rule 43 (empty -> .) ]

    D                              shift and go to state 7
    F                              shift and go to state 8
    P                              shift and go to state 9
    S                              shift and go to state 10
    SC                             shift and go to state 14
    empty                          shift and go to state 5

state 1

    (30) SC -> WHILE . parentA E parentC corcheteA C corcheteC

    parentA         shift and go to state 15


state 2

    (20) S -> PRINT . parentA E parentC puntcoma

    parentA         shift and go to state 16


state 3

    (23) S -> RETURN . X
    (28) X -> . E
    (29) X -> . empty
    (32) E -> . E or T
    (33) E -> . T
    (43) empty -> .
    (34) T -> . T menor U
    (35) T -> . U
    (36) U -> . U suma V
    (37) U -> . V
    (38) V -> . id
    (39) V -> . entero
    (40) V -> . cadena
    (41) V -> . parentA E parentC
    (42) V -> . id parentA L parentC

  ! shift/reduce conflict for id resolved as shift
    VAR             reduce using rule 43 (empty -> .)
    FUNCTION        reduce using rule 43 (empty -> .)
    IF              reduce using rule 43 (empty -> .)
    PRINT           reduce using rule 43 (empty -> .)
    INPUT           reduce using rule 43 (empty -> .)
    RETURN          reduce using rule 43 (empty -> .)
    WHILE           reduce using rule 43 (empty -> .)
    $end            reduce using rule 43 (empty -> .)
    id              shift and go to state 19
    entero          shift and go to state 26
    cadena          shift and go to state 17
    parentA         shift and go to state 18

  ! id              [ reduce using rule 43 (empty -> .) ]

    E                              shift and go to state 24
    U                              shift and go to state 20
    T                              shift and go to state 21
    V                              shift and go to state 22
    X                              shift and go to state 23
    empty                          shift and go to state 25

state 4

    (19) S -> id . igual E puntcoma
    (22) S -> id . parentA L parentC puntcoma

    igual           shift and go to state 28
    parentA         shift and go to state 27


state 5

    (5) P -> empty .
    (8) F -> empty .
    (31) SC -> empty .

  ! reduce/reduce conflict for $end resolved using rule 5 (P -> empty .)
  ! reduce/reduce conflict for VAR resolved using rule 8 (F -> empty .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 8 (F -> empty .)
  ! reduce/reduce conflict for IF resolved using rule 8 (F -> empty .)
  ! reduce/reduce conflict for id resolved using rule 8 (F -> empty .)
  ! reduce/reduce conflict for PRINT resolved using rule 8 (F -> empty .)
  ! reduce/reduce conflict for INPUT resolved using rule 8 (F -> empty .)
  ! reduce/reduce conflict for RETURN resolved using rule 8 (F -> empty .)
  ! reduce/reduce conflict for WHILE resolved using rule 8 (F -> empty .)
  ! reduce/reduce conflict for $end resolved using rule 5 (P -> empty .)
    $end            reduce using rule 5 (P -> empty .)
    VAR             reduce using rule 8 (F -> empty .)
    FUNCTION        reduce using rule 8 (F -> empty .)
    IF              reduce using rule 8 (F -> empty .)
    id              reduce using rule 8 (F -> empty .)
    PRINT           reduce using rule 8 (F -> empty .)
    INPUT           reduce using rule 8 (F -> empty .)
    RETURN          reduce using rule 8 (F -> empty .)
    WHILE           reduce using rule 8 (F -> empty .)

  ! $end            [ reduce using rule 8 (F -> empty .) ]
  ! VAR             [ reduce using rule 31 (SC -> empty .) ]
  ! FUNCTION        [ reduce using rule 31 (SC -> empty .) ]
  ! IF              [ reduce using rule 31 (SC -> empty .) ]
  ! id              [ reduce using rule 31 (SC -> empty .) ]
  ! PRINT           [ reduce using rule 31 (SC -> empty .) ]
  ! INPUT           [ reduce using rule 31 (SC -> empty .) ]
  ! RETURN          [ reduce using rule 31 (SC -> empty .) ]
  ! WHILE           [ reduce using rule 31 (SC -> empty .) ]
  ! $end            [ reduce using rule 31 (SC -> empty .) ]


state 6

    (7) F -> FUNCTION . T1 id parentA A parentC corcheteA C corcheteC
    (9) T1 -> . T
    (10) T1 -> . empty
    (34) T -> . T menor U
    (35) T -> . U
    (43) empty -> .
    (36) U -> . U suma V
    (37) U -> . V
    (38) V -> . id
    (39) V -> . entero
    (40) V -> . cadena
    (41) V -> . parentA E parentC
    (42) V -> . id parentA L parentC

  ! shift/reduce conflict for id resolved as shift
    id              shift and go to state 19
    entero          shift and go to state 26
    cadena          shift and go to state 17
    parentA         shift and go to state 18

  ! id              [ reduce using rule 43 (empty -> .) ]

    T1                             shift and go to state 29
    U                              shift and go to state 20
    T                              shift and go to state 30
    V                              shift and go to state 22
    empty                          shift and go to state 31

state 7

    (1) P -> D . P
    (1) P -> . D P
    (2) P -> . F P
    (3) P -> . S P
    (4) P -> . SC P
    (5) P -> . empty
    (6) D -> . VAR T id puntcoma
    (7) F -> . FUNCTION T1 id parentA A parentC corcheteA C corcheteC
    (8) F -> . empty
    (18) S -> . IF parentA E parentC S
    (19) S -> . id igual E puntcoma
    (20) S -> . PRINT parentA E parentC puntcoma
    (21) S -> . INPUT parentA E parentC puntcoma
    (22) S -> . id parentA L parentC puntcoma
    (23) S -> . RETURN X
    (30) SC -> . WHILE parentA E parentC corcheteA C corcheteC
    (31) SC -> . empty
    (43) empty -> .

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for id resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for INPUT resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    VAR             shift and go to state 11
    FUNCTION        shift and go to state 6
    IF              shift and go to state 13
    id              shift and go to state 4
    PRINT           shift and go to state 2
    INPUT           shift and go to state 12
    RETURN          shift and go to state 3
    WHILE           shift and go to state 1
    $end            reduce using rule 43 (empty -> .)

  ! VAR             [ reduce using rule 43 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 43 (empty -> .) ]
  ! IF              [ reduce using rule 43 (empty -> .) ]
  ! id              [ reduce using rule 43 (empty -> .) ]
  ! PRINT           [ reduce using rule 43 (empty -> .) ]
  ! INPUT           [ reduce using rule 43 (empty -> .) ]
  ! RETURN          [ reduce using rule 43 (empty -> .) ]
  ! WHILE           [ reduce using rule 43 (empty -> .) ]

    D                              shift and go to state 7
    F                              shift and go to state 8
    P                              shift and go to state 32
    S                              shift and go to state 10
    SC                             shift and go to state 14
    empty                          shift and go to state 5

state 8

    (2) P -> F . P
    (1) P -> . D P
    (2) P -> . F P
    (3) P -> . S P
    (4) P -> . SC P
    (5) P -> . empty
    (6) D -> . VAR T id puntcoma
    (7) F -> . FUNCTION T1 id parentA A parentC corcheteA C corcheteC
    (8) F -> . empty
    (18) S -> . IF parentA E parentC S
    (19) S -> . id igual E puntcoma
    (20) S -> . PRINT parentA E parentC puntcoma
    (21) S -> . INPUT parentA E parentC puntcoma
    (22) S -> . id parentA L parentC puntcoma
    (23) S -> . RETURN X
    (30) SC -> . WHILE parentA E parentC corcheteA C corcheteC
    (31) SC -> . empty
    (43) empty -> .

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for id resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for INPUT resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    VAR             shift and go to state 11
    FUNCTION        shift and go to state 6
    IF              shift and go to state 13
    id              shift and go to state 4
    PRINT           shift and go to state 2
    INPUT           shift and go to state 12
    RETURN          shift and go to state 3
    WHILE           shift and go to state 1
    $end            reduce using rule 43 (empty -> .)

  ! VAR             [ reduce using rule 43 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 43 (empty -> .) ]
  ! IF              [ reduce using rule 43 (empty -> .) ]
  ! id              [ reduce using rule 43 (empty -> .) ]
  ! PRINT           [ reduce using rule 43 (empty -> .) ]
  ! INPUT           [ reduce using rule 43 (empty -> .) ]
  ! RETURN          [ reduce using rule 43 (empty -> .) ]
  ! WHILE           [ reduce using rule 43 (empty -> .) ]

    D                              shift and go to state 7
    F                              shift and go to state 8
    P                              shift and go to state 33
    S                              shift and go to state 10
    SC                             shift and go to state 14
    empty                          shift and go to state 5

state 9

    (0) S' -> P .



state 10

    (3) P -> S . P
    (1) P -> . D P
    (2) P -> . F P
    (3) P -> . S P
    (4) P -> . SC P
    (5) P -> . empty
    (6) D -> . VAR T id puntcoma
    (7) F -> . FUNCTION T1 id parentA A parentC corcheteA C corcheteC
    (8) F -> . empty
    (18) S -> . IF parentA E parentC S
    (19) S -> . id igual E puntcoma
    (20) S -> . PRINT parentA E parentC puntcoma
    (21) S -> . INPUT parentA E parentC puntcoma
    (22) S -> . id parentA L parentC puntcoma
    (23) S -> . RETURN X
    (30) SC -> . WHILE parentA E parentC corcheteA C corcheteC
    (31) SC -> . empty
    (43) empty -> .

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for id resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for INPUT resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    VAR             shift and go to state 11
    FUNCTION        shift and go to state 6
    IF              shift and go to state 13
    id              shift and go to state 4
    PRINT           shift and go to state 2
    INPUT           shift and go to state 12
    RETURN          shift and go to state 3
    WHILE           shift and go to state 1
    $end            reduce using rule 43 (empty -> .)

  ! VAR             [ reduce using rule 43 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 43 (empty -> .) ]
  ! IF              [ reduce using rule 43 (empty -> .) ]
  ! id              [ reduce using rule 43 (empty -> .) ]
  ! PRINT           [ reduce using rule 43 (empty -> .) ]
  ! INPUT           [ reduce using rule 43 (empty -> .) ]
  ! RETURN          [ reduce using rule 43 (empty -> .) ]
  ! WHILE           [ reduce using rule 43 (empty -> .) ]

    D                              shift and go to state 7
    F                              shift and go to state 8
    P                              shift and go to state 34
    S                              shift and go to state 10
    SC                             shift and go to state 14
    empty                          shift and go to state 5

state 11

    (6) D -> VAR . T id puntcoma
    (34) T -> . T menor U
    (35) T -> . U
    (36) U -> . U suma V
    (37) U -> . V
    (38) V -> . id
    (39) V -> . entero
    (40) V -> . cadena
    (41) V -> . parentA E parentC
    (42) V -> . id parentA L parentC

    id              shift and go to state 19
    entero          shift and go to state 26
    cadena          shift and go to state 17
    parentA         shift and go to state 18

    U                              shift and go to state 20
    T                              shift and go to state 35
    V                              shift and go to state 22

state 12

    (21) S -> INPUT . parentA E parentC puntcoma

    parentA         shift and go to state 36


state 13

    (18) S -> IF . parentA E parentC S

    parentA         shift and go to state 37


state 14

    (4) P -> SC . P
    (1) P -> . D P
    (2) P -> . F P
    (3) P -> . S P
    (4) P -> . SC P
    (5) P -> . empty
    (6) D -> . VAR T id puntcoma
    (7) F -> . FUNCTION T1 id parentA A parentC corcheteA C corcheteC
    (8) F -> . empty
    (18) S -> . IF parentA E parentC S
    (19) S -> . id igual E puntcoma
    (20) S -> . PRINT parentA E parentC puntcoma
    (21) S -> . INPUT parentA E parentC puntcoma
    (22) S -> . id parentA L parentC puntcoma
    (23) S -> . RETURN X
    (30) SC -> . WHILE parentA E parentC corcheteA C corcheteC
    (31) SC -> . empty
    (43) empty -> .

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for id resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for INPUT resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    VAR             shift and go to state 11
    FUNCTION        shift and go to state 6
    IF              shift and go to state 13
    id              shift and go to state 4
    PRINT           shift and go to state 2
    INPUT           shift and go to state 12
    RETURN          shift and go to state 3
    WHILE           shift and go to state 1
    $end            reduce using rule 43 (empty -> .)

  ! VAR             [ reduce using rule 43 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 43 (empty -> .) ]
  ! IF              [ reduce using rule 43 (empty -> .) ]
  ! id              [ reduce using rule 43 (empty -> .) ]
  ! PRINT           [ reduce using rule 43 (empty -> .) ]
  ! INPUT           [ reduce using rule 43 (empty -> .) ]
  ! RETURN          [ reduce using rule 43 (empty -> .) ]
  ! WHILE           [ reduce using rule 43 (empty -> .) ]

    D                              shift and go to state 7
    F                              shift and go to state 8
    P                              shift and go to state 38
    S                              shift and go to state 10
    SC                             shift and go to state 14
    empty                          shift and go to state 5

state 15

    (30) SC -> WHILE parentA . E parentC corcheteA C corcheteC
    (32) E -> . E or T
    (33) E -> . T
    (34) T -> . T menor U
    (35) T -> . U
    (36) U -> . U suma V
    (37) U -> . V
    (38) V -> . id
    (39) V -> . entero
    (40) V -> . cadena
    (41) V -> . parentA E parentC
    (42) V -> . id parentA L parentC

    id              shift and go to state 19
    entero          shift and go to state 26
    cadena          shift and go to state 17
    parentA         shift and go to state 18

    E                              shift and go to state 39
    U                              shift and go to state 20
    T                              shift and go to state 21
    V                              shift and go to state 22

state 16

    (20) S -> PRINT parentA . E parentC puntcoma
    (32) E -> . E or T
    (33) E -> . T
    (34) T -> . T menor U
    (35) T -> . U
    (36) U -> . U suma V
    (37) U -> . V
    (38) V -> . id
    (39) V -> . entero
    (40) V -> . cadena
    (41) V -> . parentA E parentC
    (42) V -> . id parentA L parentC

    id              shift and go to state 19
    entero          shift and go to state 26
    cadena          shift and go to state 17
    parentA         shift and go to state 18

    U                              shift and go to state 20
    E                              shift and go to state 40
    T                              shift and go to state 21
    V                              shift and go to state 22

state 17

    (40) V -> cadena .

    suma            reduce using rule 40 (V -> cadena .)
    menor           reduce using rule 40 (V -> cadena .)
    id              reduce using rule 40 (V -> cadena .)
    puntcoma        reduce using rule 40 (V -> cadena .)
    or              reduce using rule 40 (V -> cadena .)
    VAR             reduce using rule 40 (V -> cadena .)
    FUNCTION        reduce using rule 40 (V -> cadena .)
    IF              reduce using rule 40 (V -> cadena .)
    PRINT           reduce using rule 40 (V -> cadena .)
    INPUT           reduce using rule 40 (V -> cadena .)
    RETURN          reduce using rule 40 (V -> cadena .)
    WHILE           reduce using rule 40 (V -> cadena .)
    $end            reduce using rule 40 (V -> cadena .)
    parentC         reduce using rule 40 (V -> cadena .)


state 18

    (41) V -> parentA . E parentC
    (32) E -> . E or T
    (33) E -> . T
    (34) T -> . T menor U
    (35) T -> . U
    (36) U -> . U suma V
    (37) U -> . V
    (38) V -> . id
    (39) V -> . entero
    (40) V -> . cadena
    (41) V -> . parentA E parentC
    (42) V -> . id parentA L parentC

    id              shift and go to state 19
    entero          shift and go to state 26
    cadena          shift and go to state 17
    parentA         shift and go to state 18

    U                              shift and go to state 20
    E                              shift and go to state 41
    T                              shift and go to state 21
    V                              shift and go to state 22

state 19

    (38) V -> id .
    (42) V -> id . parentA L parentC

    suma            reduce using rule 38 (V -> id .)
    menor           reduce using rule 38 (V -> id .)
    id              reduce using rule 38 (V -> id .)
    puntcoma        reduce using rule 38 (V -> id .)
    or              reduce using rule 38 (V -> id .)
    VAR             reduce using rule 38 (V -> id .)
    FUNCTION        reduce using rule 38 (V -> id .)
    IF              reduce using rule 38 (V -> id .)
    PRINT           reduce using rule 38 (V -> id .)
    INPUT           reduce using rule 38 (V -> id .)
    RETURN          reduce using rule 38 (V -> id .)
    WHILE           reduce using rule 38 (V -> id .)
    $end            reduce using rule 38 (V -> id .)
    parentC         reduce using rule 38 (V -> id .)
    parentA         shift and go to state 42


state 20

    (35) T -> U .
    (36) U -> U . suma V

    id              reduce using rule 35 (T -> U .)
    menor           reduce using rule 35 (T -> U .)
    parentC         reduce using rule 35 (T -> U .)
    or              reduce using rule 35 (T -> U .)
    VAR             reduce using rule 35 (T -> U .)
    FUNCTION        reduce using rule 35 (T -> U .)
    IF              reduce using rule 35 (T -> U .)
    PRINT           reduce using rule 35 (T -> U .)
    INPUT           reduce using rule 35 (T -> U .)
    RETURN          reduce using rule 35 (T -> U .)
    WHILE           reduce using rule 35 (T -> U .)
    $end            reduce using rule 35 (T -> U .)
    puntcoma        reduce using rule 35 (T -> U .)
    suma            shift and go to state 43


state 21

    (33) E -> T .
    (34) T -> T . menor U

    or              reduce using rule 33 (E -> T .)
    VAR             reduce using rule 33 (E -> T .)
    FUNCTION        reduce using rule 33 (E -> T .)
    IF              reduce using rule 33 (E -> T .)
    id              reduce using rule 33 (E -> T .)
    PRINT           reduce using rule 33 (E -> T .)
    INPUT           reduce using rule 33 (E -> T .)
    RETURN          reduce using rule 33 (E -> T .)
    WHILE           reduce using rule 33 (E -> T .)
    $end            reduce using rule 33 (E -> T .)
    puntcoma        reduce using rule 33 (E -> T .)
    parentC         reduce using rule 33 (E -> T .)
    menor           shift and go to state 44


state 22

    (37) U -> V .

    suma            reduce using rule 37 (U -> V .)
    menor           reduce using rule 37 (U -> V .)
    puntcoma        reduce using rule 37 (U -> V .)
    or              reduce using rule 37 (U -> V .)
    id              reduce using rule 37 (U -> V .)
    parentC         reduce using rule 37 (U -> V .)
    VAR             reduce using rule 37 (U -> V .)
    FUNCTION        reduce using rule 37 (U -> V .)
    IF              reduce using rule 37 (U -> V .)
    PRINT           reduce using rule 37 (U -> V .)
    INPUT           reduce using rule 37 (U -> V .)
    RETURN          reduce using rule 37 (U -> V .)
    WHILE           reduce using rule 37 (U -> V .)
    $end            reduce using rule 37 (U -> V .)


state 23

    (23) S -> RETURN X .

    VAR             reduce using rule 23 (S -> RETURN X .)
    FUNCTION        reduce using rule 23 (S -> RETURN X .)
    IF              reduce using rule 23 (S -> RETURN X .)
    id              reduce using rule 23 (S -> RETURN X .)
    PRINT           reduce using rule 23 (S -> RETURN X .)
    INPUT           reduce using rule 23 (S -> RETURN X .)
    RETURN          reduce using rule 23 (S -> RETURN X .)
    WHILE           reduce using rule 23 (S -> RETURN X .)
    $end            reduce using rule 23 (S -> RETURN X .)


state 24

    (28) X -> E .
    (32) E -> E . or T

    VAR             reduce using rule 28 (X -> E .)
    FUNCTION        reduce using rule 28 (X -> E .)
    IF              reduce using rule 28 (X -> E .)
    id              reduce using rule 28 (X -> E .)
    PRINT           reduce using rule 28 (X -> E .)
    INPUT           reduce using rule 28 (X -> E .)
    RETURN          reduce using rule 28 (X -> E .)
    WHILE           reduce using rule 28 (X -> E .)
    $end            reduce using rule 28 (X -> E .)
    or              shift and go to state 45


state 25

    (29) X -> empty .

    VAR             reduce using rule 29 (X -> empty .)
    FUNCTION        reduce using rule 29 (X -> empty .)
    IF              reduce using rule 29 (X -> empty .)
    id              reduce using rule 29 (X -> empty .)
    PRINT           reduce using rule 29 (X -> empty .)
    INPUT           reduce using rule 29 (X -> empty .)
    RETURN          reduce using rule 29 (X -> empty .)
    WHILE           reduce using rule 29 (X -> empty .)
    $end            reduce using rule 29 (X -> empty .)


state 26

    (39) V -> entero .

    suma            reduce using rule 39 (V -> entero .)
    menor           reduce using rule 39 (V -> entero .)
    id              reduce using rule 39 (V -> entero .)
    puntcoma        reduce using rule 39 (V -> entero .)
    or              reduce using rule 39 (V -> entero .)
    VAR             reduce using rule 39 (V -> entero .)
    FUNCTION        reduce using rule 39 (V -> entero .)
    IF              reduce using rule 39 (V -> entero .)
    PRINT           reduce using rule 39 (V -> entero .)
    INPUT           reduce using rule 39 (V -> entero .)
    RETURN          reduce using rule 39 (V -> entero .)
    WHILE           reduce using rule 39 (V -> entero .)
    $end            reduce using rule 39 (V -> entero .)
    parentC         reduce using rule 39 (V -> entero .)


state 27

    (22) S -> id parentA . L parentC puntcoma
    (24) L -> . empty
    (25) L -> . id L1
    (43) empty -> .

    id              shift and go to state 47
    parentC         reduce using rule 43 (empty -> .)

    L                              shift and go to state 46
    empty                          shift and go to state 48

state 28

    (19) S -> id igual . E puntcoma
    (32) E -> . E or T
    (33) E -> . T
    (34) T -> . T menor U
    (35) T -> . U
    (36) U -> . U suma V
    (37) U -> . V
    (38) V -> . id
    (39) V -> . entero
    (40) V -> . cadena
    (41) V -> . parentA E parentC
    (42) V -> . id parentA L parentC

    id              shift and go to state 19
    entero          shift and go to state 26
    cadena          shift and go to state 17
    parentA         shift and go to state 18

    U                              shift and go to state 20
    E                              shift and go to state 49
    T                              shift and go to state 21
    V                              shift and go to state 22

state 29

    (7) F -> FUNCTION T1 . id parentA A parentC corcheteA C corcheteC

    id              shift and go to state 50


state 30

    (9) T1 -> T .
    (34) T -> T . menor U

    id              reduce using rule 9 (T1 -> T .)
    menor           shift and go to state 44


state 31

    (10) T1 -> empty .

    id              reduce using rule 10 (T1 -> empty .)


state 32

    (1) P -> D P .

    $end            reduce using rule 1 (P -> D P .)


state 33

    (2) P -> F P .

    $end            reduce using rule 2 (P -> F P .)


state 34

    (3) P -> S P .

    $end            reduce using rule 3 (P -> S P .)


state 35

    (6) D -> VAR T . id puntcoma
    (34) T -> T . menor U

    id              shift and go to state 51
    menor           shift and go to state 44


state 36

    (21) S -> INPUT parentA . E parentC puntcoma
    (32) E -> . E or T
    (33) E -> . T
    (34) T -> . T menor U
    (35) T -> . U
    (36) U -> . U suma V
    (37) U -> . V
    (38) V -> . id
    (39) V -> . entero
    (40) V -> . cadena
    (41) V -> . parentA E parentC
    (42) V -> . id parentA L parentC

    id              shift and go to state 19
    entero          shift and go to state 26
    cadena          shift and go to state 17
    parentA         shift and go to state 18

    U                              shift and go to state 20
    E                              shift and go to state 52
    T                              shift and go to state 21
    V                              shift and go to state 22

state 37

    (18) S -> IF parentA . E parentC S
    (32) E -> . E or T
    (33) E -> . T
    (34) T -> . T menor U
    (35) T -> . U
    (36) U -> . U suma V
    (37) U -> . V
    (38) V -> . id
    (39) V -> . entero
    (40) V -> . cadena
    (41) V -> . parentA E parentC
    (42) V -> . id parentA L parentC

    id              shift and go to state 19
    entero          shift and go to state 26
    cadena          shift and go to state 17
    parentA         shift and go to state 18

    E                              shift and go to state 53
    U                              shift and go to state 20
    T                              shift and go to state 21
    V                              shift and go to state 22

state 38

    (4) P -> SC P .

    $end            reduce using rule 4 (P -> SC P .)


state 39

    (30) SC -> WHILE parentA E . parentC corcheteA C corcheteC
    (32) E -> E . or T

    parentC         shift and go to state 54
    or              shift and go to state 45


state 40

    (20) S -> PRINT parentA E . parentC puntcoma
    (32) E -> E . or T

    parentC         shift and go to state 55
    or              shift and go to state 45


state 41

    (41) V -> parentA E . parentC
    (32) E -> E . or T

    parentC         shift and go to state 56
    or              shift and go to state 45


state 42

    (42) V -> id parentA . L parentC
    (24) L -> . empty
    (25) L -> . id L1
    (43) empty -> .

    id              shift and go to state 47
    parentC         reduce using rule 43 (empty -> .)

    L                              shift and go to state 57
    empty                          shift and go to state 48

state 43

    (36) U -> U suma . V
    (38) V -> . id
    (39) V -> . entero
    (40) V -> . cadena
    (41) V -> . parentA E parentC
    (42) V -> . id parentA L parentC

    id              shift and go to state 19
    entero          shift and go to state 26
    cadena          shift and go to state 17
    parentA         shift and go to state 18

    V                              shift and go to state 58

state 44

    (34) T -> T menor . U
    (36) U -> . U suma V
    (37) U -> . V
    (38) V -> . id
    (39) V -> . entero
    (40) V -> . cadena
    (41) V -> . parentA E parentC
    (42) V -> . id parentA L parentC

    id              shift and go to state 19
    entero          shift and go to state 26
    cadena          shift and go to state 17
    parentA         shift and go to state 18

    U                              shift and go to state 59
    V                              shift and go to state 22

state 45

    (32) E -> E or . T
    (34) T -> . T menor U
    (35) T -> . U
    (36) U -> . U suma V
    (37) U -> . V
    (38) V -> . id
    (39) V -> . entero
    (40) V -> . cadena
    (41) V -> . parentA E parentC
    (42) V -> . id parentA L parentC

    id              shift and go to state 19
    entero          shift and go to state 26
    cadena          shift and go to state 17
    parentA         shift and go to state 18

    U                              shift and go to state 20
    T                              shift and go to state 60
    V                              shift and go to state 22

state 46

    (22) S -> id parentA L . parentC puntcoma

    parentC         shift and go to state 61


state 47

    (25) L -> id . L1
    (26) L1 -> . empty
    (27) L1 -> . coma id L1
    (43) empty -> .

    coma            shift and go to state 62
    parentC         reduce using rule 43 (empty -> .)

    empty                          shift and go to state 63
    L1                             shift and go to state 64

state 48

    (24) L -> empty .

    parentC         reduce using rule 24 (L -> empty .)


state 49

    (19) S -> id igual E . puntcoma
    (32) E -> E . or T

    puntcoma        shift and go to state 65
    or              shift and go to state 45


state 50

    (7) F -> FUNCTION T1 id . parentA A parentC corcheteA C corcheteC

    parentA         shift and go to state 66


state 51

    (6) D -> VAR T id . puntcoma

    puntcoma        shift and go to state 67


state 52

    (21) S -> INPUT parentA E . parentC puntcoma
    (32) E -> E . or T

    parentC         shift and go to state 68
    or              shift and go to state 45


state 53

    (18) S -> IF parentA E . parentC S
    (32) E -> E . or T

    parentC         shift and go to state 69
    or              shift and go to state 45


state 54

    (30) SC -> WHILE parentA E parentC . corcheteA C corcheteC

    corcheteA       shift and go to state 70


state 55

    (20) S -> PRINT parentA E parentC . puntcoma

    puntcoma        shift and go to state 71


state 56

    (41) V -> parentA E parentC .

    suma            reduce using rule 41 (V -> parentA E parentC .)
    menor           reduce using rule 41 (V -> parentA E parentC .)
    id              reduce using rule 41 (V -> parentA E parentC .)
    puntcoma        reduce using rule 41 (V -> parentA E parentC .)
    or              reduce using rule 41 (V -> parentA E parentC .)
    VAR             reduce using rule 41 (V -> parentA E parentC .)
    FUNCTION        reduce using rule 41 (V -> parentA E parentC .)
    IF              reduce using rule 41 (V -> parentA E parentC .)
    PRINT           reduce using rule 41 (V -> parentA E parentC .)
    INPUT           reduce using rule 41 (V -> parentA E parentC .)
    RETURN          reduce using rule 41 (V -> parentA E parentC .)
    WHILE           reduce using rule 41 (V -> parentA E parentC .)
    $end            reduce using rule 41 (V -> parentA E parentC .)
    parentC         reduce using rule 41 (V -> parentA E parentC .)


state 57

    (42) V -> id parentA L . parentC

    parentC         shift and go to state 72


state 58

    (36) U -> U suma V .

    suma            reduce using rule 36 (U -> U suma V .)
    menor           reduce using rule 36 (U -> U suma V .)
    puntcoma        reduce using rule 36 (U -> U suma V .)
    or              reduce using rule 36 (U -> U suma V .)
    id              reduce using rule 36 (U -> U suma V .)
    parentC         reduce using rule 36 (U -> U suma V .)
    VAR             reduce using rule 36 (U -> U suma V .)
    FUNCTION        reduce using rule 36 (U -> U suma V .)
    IF              reduce using rule 36 (U -> U suma V .)
    PRINT           reduce using rule 36 (U -> U suma V .)
    INPUT           reduce using rule 36 (U -> U suma V .)
    RETURN          reduce using rule 36 (U -> U suma V .)
    WHILE           reduce using rule 36 (U -> U suma V .)
    $end            reduce using rule 36 (U -> U suma V .)


state 59

    (34) T -> T menor U .
    (36) U -> U . suma V

    id              reduce using rule 34 (T -> T menor U .)
    menor           reduce using rule 34 (T -> T menor U .)
    parentC         reduce using rule 34 (T -> T menor U .)
    or              reduce using rule 34 (T -> T menor U .)
    VAR             reduce using rule 34 (T -> T menor U .)
    FUNCTION        reduce using rule 34 (T -> T menor U .)
    IF              reduce using rule 34 (T -> T menor U .)
    PRINT           reduce using rule 34 (T -> T menor U .)
    INPUT           reduce using rule 34 (T -> T menor U .)
    RETURN          reduce using rule 34 (T -> T menor U .)
    WHILE           reduce using rule 34 (T -> T menor U .)
    $end            reduce using rule 34 (T -> T menor U .)
    puntcoma        reduce using rule 34 (T -> T menor U .)
    suma            shift and go to state 43


state 60

    (32) E -> E or T .
    (34) T -> T . menor U

    or              reduce using rule 32 (E -> E or T .)
    VAR             reduce using rule 32 (E -> E or T .)
    FUNCTION        reduce using rule 32 (E -> E or T .)
    IF              reduce using rule 32 (E -> E or T .)
    id              reduce using rule 32 (E -> E or T .)
    PRINT           reduce using rule 32 (E -> E or T .)
    INPUT           reduce using rule 32 (E -> E or T .)
    RETURN          reduce using rule 32 (E -> E or T .)
    WHILE           reduce using rule 32 (E -> E or T .)
    $end            reduce using rule 32 (E -> E or T .)
    puntcoma        reduce using rule 32 (E -> E or T .)
    parentC         reduce using rule 32 (E -> E or T .)
    menor           shift and go to state 44


state 61

    (22) S -> id parentA L parentC . puntcoma

    puntcoma        shift and go to state 73


state 62

    (27) L1 -> coma . id L1

    id              shift and go to state 74


state 63

    (26) L1 -> empty .

    parentC         reduce using rule 26 (L1 -> empty .)


state 64

    (25) L -> id L1 .

    parentC         reduce using rule 25 (L -> id L1 .)


state 65

    (19) S -> id igual E puntcoma .

    VAR             reduce using rule 19 (S -> id igual E puntcoma .)
    FUNCTION        reduce using rule 19 (S -> id igual E puntcoma .)
    IF              reduce using rule 19 (S -> id igual E puntcoma .)
    id              reduce using rule 19 (S -> id igual E puntcoma .)
    PRINT           reduce using rule 19 (S -> id igual E puntcoma .)
    INPUT           reduce using rule 19 (S -> id igual E puntcoma .)
    RETURN          reduce using rule 19 (S -> id igual E puntcoma .)
    WHILE           reduce using rule 19 (S -> id igual E puntcoma .)
    $end            reduce using rule 19 (S -> id igual E puntcoma .)


state 66

    (7) F -> FUNCTION T1 id parentA . A parentC corcheteA C corcheteC
    (11) A -> . empty
    (12) A -> . T id A1
    (43) empty -> .
    (34) T -> . T menor U
    (35) T -> . U
    (36) U -> . U suma V
    (37) U -> . V
    (38) V -> . id
    (39) V -> . entero
    (40) V -> . cadena
    (41) V -> . parentA E parentC
    (42) V -> . id parentA L parentC

    parentC         reduce using rule 43 (empty -> .)
    id              shift and go to state 19
    entero          shift and go to state 26
    cadena          shift and go to state 17
    parentA         shift and go to state 18

    A                              shift and go to state 75
    U                              shift and go to state 20
    T                              shift and go to state 76
    V                              shift and go to state 22
    empty                          shift and go to state 77

state 67

    (6) D -> VAR T id puntcoma .

    VAR             reduce using rule 6 (D -> VAR T id puntcoma .)
    WHILE           reduce using rule 6 (D -> VAR T id puntcoma .)
    corcheteC       reduce using rule 6 (D -> VAR T id puntcoma .)
    FUNCTION        reduce using rule 6 (D -> VAR T id puntcoma .)
    IF              reduce using rule 6 (D -> VAR T id puntcoma .)
    id              reduce using rule 6 (D -> VAR T id puntcoma .)
    PRINT           reduce using rule 6 (D -> VAR T id puntcoma .)
    INPUT           reduce using rule 6 (D -> VAR T id puntcoma .)
    RETURN          reduce using rule 6 (D -> VAR T id puntcoma .)
    $end            reduce using rule 6 (D -> VAR T id puntcoma .)


state 68

    (21) S -> INPUT parentA E parentC . puntcoma

    puntcoma        shift and go to state 78


state 69

    (18) S -> IF parentA E parentC . S
    (18) S -> . IF parentA E parentC S
    (19) S -> . id igual E puntcoma
    (20) S -> . PRINT parentA E parentC puntcoma
    (21) S -> . INPUT parentA E parentC puntcoma
    (22) S -> . id parentA L parentC puntcoma
    (23) S -> . RETURN X

    IF              shift and go to state 13
    id              shift and go to state 4
    PRINT           shift and go to state 2
    INPUT           shift and go to state 12
    RETURN          shift and go to state 3

    S                              shift and go to state 79

state 70

    (30) SC -> WHILE parentA E parentC corcheteA . C corcheteC
    (15) C -> . D C
    (16) C -> . SC
    (17) C -> . empty
    (6) D -> . VAR T id puntcoma
    (30) SC -> . WHILE parentA E parentC corcheteA C corcheteC
    (31) SC -> . empty
    (43) empty -> .

    VAR             shift and go to state 11
    WHILE           shift and go to state 1
    corcheteC       reduce using rule 43 (empty -> .)

    C                              shift and go to state 80
    D                              shift and go to state 81
    SC                             shift and go to state 82
    empty                          shift and go to state 83

state 71

    (20) S -> PRINT parentA E parentC puntcoma .

    VAR             reduce using rule 20 (S -> PRINT parentA E parentC puntcoma .)
    FUNCTION        reduce using rule 20 (S -> PRINT parentA E parentC puntcoma .)
    IF              reduce using rule 20 (S -> PRINT parentA E parentC puntcoma .)
    id              reduce using rule 20 (S -> PRINT parentA E parentC puntcoma .)
    PRINT           reduce using rule 20 (S -> PRINT parentA E parentC puntcoma .)
    INPUT           reduce using rule 20 (S -> PRINT parentA E parentC puntcoma .)
    RETURN          reduce using rule 20 (S -> PRINT parentA E parentC puntcoma .)
    WHILE           reduce using rule 20 (S -> PRINT parentA E parentC puntcoma .)
    $end            reduce using rule 20 (S -> PRINT parentA E parentC puntcoma .)


state 72

    (42) V -> id parentA L parentC .

    suma            reduce using rule 42 (V -> id parentA L parentC .)
    menor           reduce using rule 42 (V -> id parentA L parentC .)
    id              reduce using rule 42 (V -> id parentA L parentC .)
    puntcoma        reduce using rule 42 (V -> id parentA L parentC .)
    or              reduce using rule 42 (V -> id parentA L parentC .)
    VAR             reduce using rule 42 (V -> id parentA L parentC .)
    FUNCTION        reduce using rule 42 (V -> id parentA L parentC .)
    IF              reduce using rule 42 (V -> id parentA L parentC .)
    PRINT           reduce using rule 42 (V -> id parentA L parentC .)
    INPUT           reduce using rule 42 (V -> id parentA L parentC .)
    RETURN          reduce using rule 42 (V -> id parentA L parentC .)
    WHILE           reduce using rule 42 (V -> id parentA L parentC .)
    $end            reduce using rule 42 (V -> id parentA L parentC .)
    parentC         reduce using rule 42 (V -> id parentA L parentC .)


state 73

    (22) S -> id parentA L parentC puntcoma .

    VAR             reduce using rule 22 (S -> id parentA L parentC puntcoma .)
    FUNCTION        reduce using rule 22 (S -> id parentA L parentC puntcoma .)
    IF              reduce using rule 22 (S -> id parentA L parentC puntcoma .)
    id              reduce using rule 22 (S -> id parentA L parentC puntcoma .)
    PRINT           reduce using rule 22 (S -> id parentA L parentC puntcoma .)
    INPUT           reduce using rule 22 (S -> id parentA L parentC puntcoma .)
    RETURN          reduce using rule 22 (S -> id parentA L parentC puntcoma .)
    WHILE           reduce using rule 22 (S -> id parentA L parentC puntcoma .)
    $end            reduce using rule 22 (S -> id parentA L parentC puntcoma .)


state 74

    (27) L1 -> coma id . L1
    (26) L1 -> . empty
    (27) L1 -> . coma id L1
    (43) empty -> .

    coma            shift and go to state 62
    parentC         reduce using rule 43 (empty -> .)

    empty                          shift and go to state 63
    L1                             shift and go to state 84

state 75

    (7) F -> FUNCTION T1 id parentA A . parentC corcheteA C corcheteC

    parentC         shift and go to state 85


state 76

    (12) A -> T . id A1
    (34) T -> T . menor U

    id              shift and go to state 86
    menor           shift and go to state 44


state 77

    (11) A -> empty .

    parentC         reduce using rule 11 (A -> empty .)


state 78

    (21) S -> INPUT parentA E parentC puntcoma .

    VAR             reduce using rule 21 (S -> INPUT parentA E parentC puntcoma .)
    FUNCTION        reduce using rule 21 (S -> INPUT parentA E parentC puntcoma .)
    IF              reduce using rule 21 (S -> INPUT parentA E parentC puntcoma .)
    id              reduce using rule 21 (S -> INPUT parentA E parentC puntcoma .)
    PRINT           reduce using rule 21 (S -> INPUT parentA E parentC puntcoma .)
    INPUT           reduce using rule 21 (S -> INPUT parentA E parentC puntcoma .)
    RETURN          reduce using rule 21 (S -> INPUT parentA E parentC puntcoma .)
    WHILE           reduce using rule 21 (S -> INPUT parentA E parentC puntcoma .)
    $end            reduce using rule 21 (S -> INPUT parentA E parentC puntcoma .)


state 79

    (18) S -> IF parentA E parentC S .

    VAR             reduce using rule 18 (S -> IF parentA E parentC S .)
    FUNCTION        reduce using rule 18 (S -> IF parentA E parentC S .)
    IF              reduce using rule 18 (S -> IF parentA E parentC S .)
    id              reduce using rule 18 (S -> IF parentA E parentC S .)
    PRINT           reduce using rule 18 (S -> IF parentA E parentC S .)
    INPUT           reduce using rule 18 (S -> IF parentA E parentC S .)
    RETURN          reduce using rule 18 (S -> IF parentA E parentC S .)
    WHILE           reduce using rule 18 (S -> IF parentA E parentC S .)
    $end            reduce using rule 18 (S -> IF parentA E parentC S .)


state 80

    (30) SC -> WHILE parentA E parentC corcheteA C . corcheteC

    corcheteC       shift and go to state 87


state 81

    (15) C -> D . C
    (15) C -> . D C
    (16) C -> . SC
    (17) C -> . empty
    (6) D -> . VAR T id puntcoma
    (30) SC -> . WHILE parentA E parentC corcheteA C corcheteC
    (31) SC -> . empty
    (43) empty -> .

    VAR             shift and go to state 11
    WHILE           shift and go to state 1
    corcheteC       reduce using rule 43 (empty -> .)

    C                              shift and go to state 88
    D                              shift and go to state 81
    SC                             shift and go to state 82
    empty                          shift and go to state 83

state 82

    (16) C -> SC .

    corcheteC       reduce using rule 16 (C -> SC .)


state 83

    (17) C -> empty .
    (31) SC -> empty .

  ! reduce/reduce conflict for corcheteC resolved using rule 17 (C -> empty .)
    corcheteC       reduce using rule 17 (C -> empty .)

  ! corcheteC       [ reduce using rule 31 (SC -> empty .) ]


state 84

    (27) L1 -> coma id L1 .

    parentC         reduce using rule 27 (L1 -> coma id L1 .)


state 85

    (7) F -> FUNCTION T1 id parentA A parentC . corcheteA C corcheteC

    corcheteA       shift and go to state 89


state 86

    (12) A -> T id . A1
    (13) A1 -> . empty
    (14) A1 -> . coma T id A1
    (43) empty -> .

    coma            shift and go to state 91
    parentC         reduce using rule 43 (empty -> .)

    A1                             shift and go to state 90
    empty                          shift and go to state 92

state 87

    (30) SC -> WHILE parentA E parentC corcheteA C corcheteC .

    corcheteC       reduce using rule 30 (SC -> WHILE parentA E parentC corcheteA C corcheteC .)
    VAR             reduce using rule 30 (SC -> WHILE parentA E parentC corcheteA C corcheteC .)
    FUNCTION        reduce using rule 30 (SC -> WHILE parentA E parentC corcheteA C corcheteC .)
    IF              reduce using rule 30 (SC -> WHILE parentA E parentC corcheteA C corcheteC .)
    id              reduce using rule 30 (SC -> WHILE parentA E parentC corcheteA C corcheteC .)
    PRINT           reduce using rule 30 (SC -> WHILE parentA E parentC corcheteA C corcheteC .)
    INPUT           reduce using rule 30 (SC -> WHILE parentA E parentC corcheteA C corcheteC .)
    RETURN          reduce using rule 30 (SC -> WHILE parentA E parentC corcheteA C corcheteC .)
    WHILE           reduce using rule 30 (SC -> WHILE parentA E parentC corcheteA C corcheteC .)
    $end            reduce using rule 30 (SC -> WHILE parentA E parentC corcheteA C corcheteC .)


state 88

    (15) C -> D C .

    corcheteC       reduce using rule 15 (C -> D C .)


state 89

    (7) F -> FUNCTION T1 id parentA A parentC corcheteA . C corcheteC
    (15) C -> . D C
    (16) C -> . SC
    (17) C -> . empty
    (6) D -> . VAR T id puntcoma
    (30) SC -> . WHILE parentA E parentC corcheteA C corcheteC
    (31) SC -> . empty
    (43) empty -> .

    VAR             shift and go to state 11
    WHILE           shift and go to state 1
    corcheteC       reduce using rule 43 (empty -> .)

    C                              shift and go to state 93
    D                              shift and go to state 81
    SC                             shift and go to state 82
    empty                          shift and go to state 83

state 90

    (12) A -> T id A1 .

    parentC         reduce using rule 12 (A -> T id A1 .)


state 91

    (14) A1 -> coma . T id A1
    (34) T -> . T menor U
    (35) T -> . U
    (36) U -> . U suma V
    (37) U -> . V
    (38) V -> . id
    (39) V -> . entero
    (40) V -> . cadena
    (41) V -> . parentA E parentC
    (42) V -> . id parentA L parentC

    id              shift and go to state 19
    entero          shift and go to state 26
    cadena          shift and go to state 17
    parentA         shift and go to state 18

    U                              shift and go to state 20
    T                              shift and go to state 94
    V                              shift and go to state 22

state 92

    (13) A1 -> empty .

    parentC         reduce using rule 13 (A1 -> empty .)


state 93

    (7) F -> FUNCTION T1 id parentA A parentC corcheteA C . corcheteC

    corcheteC       shift and go to state 95


state 94

    (14) A1 -> coma T . id A1
    (34) T -> T . menor U

    id              shift and go to state 96
    menor           shift and go to state 44


state 95

    (7) F -> FUNCTION T1 id parentA A parentC corcheteA C corcheteC .

    VAR             reduce using rule 7 (F -> FUNCTION T1 id parentA A parentC corcheteA C corcheteC .)
    FUNCTION        reduce using rule 7 (F -> FUNCTION T1 id parentA A parentC corcheteA C corcheteC .)
    IF              reduce using rule 7 (F -> FUNCTION T1 id parentA A parentC corcheteA C corcheteC .)
    id              reduce using rule 7 (F -> FUNCTION T1 id parentA A parentC corcheteA C corcheteC .)
    PRINT           reduce using rule 7 (F -> FUNCTION T1 id parentA A parentC corcheteA C corcheteC .)
    INPUT           reduce using rule 7 (F -> FUNCTION T1 id parentA A parentC corcheteA C corcheteC .)
    RETURN          reduce using rule 7 (F -> FUNCTION T1 id parentA A parentC corcheteA C corcheteC .)
    WHILE           reduce using rule 7 (F -> FUNCTION T1 id parentA A parentC corcheteA C corcheteC .)
    $end            reduce using rule 7 (F -> FUNCTION T1 id parentA A parentC corcheteA C corcheteC .)


state 96

    (14) A1 -> coma T id . A1
    (13) A1 -> . empty
    (14) A1 -> . coma T id A1
    (43) empty -> .

    coma            shift and go to state 91
    parentC         reduce using rule 43 (empty -> .)

    A1                             shift and go to state 97
    empty                          shift and go to state 92

state 97

    (14) A1 -> coma T id A1 .

    parentC         reduce using rule 14 (A1 -> coma T id A1 .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for VAR in state 0 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 0 resolved as shift
WARNING: shift/reduce conflict for IF in state 0 resolved as shift
WARNING: shift/reduce conflict for id in state 0 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 0 resolved as shift
WARNING: shift/reduce conflict for INPUT in state 0 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 0 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 0 resolved as shift
WARNING: shift/reduce conflict for id in state 3 resolved as shift
WARNING: shift/reduce conflict for id in state 6 resolved as shift
WARNING: shift/reduce conflict for VAR in state 7 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 7 resolved as shift
WARNING: shift/reduce conflict for IF in state 7 resolved as shift
WARNING: shift/reduce conflict for id in state 7 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 7 resolved as shift
WARNING: shift/reduce conflict for INPUT in state 7 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 7 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 7 resolved as shift
WARNING: shift/reduce conflict for VAR in state 8 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 8 resolved as shift
WARNING: shift/reduce conflict for IF in state 8 resolved as shift
WARNING: shift/reduce conflict for id in state 8 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 8 resolved as shift
WARNING: shift/reduce conflict for INPUT in state 8 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 8 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 8 resolved as shift
WARNING: shift/reduce conflict for VAR in state 10 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 10 resolved as shift
WARNING: shift/reduce conflict for IF in state 10 resolved as shift
WARNING: shift/reduce conflict for id in state 10 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 10 resolved as shift
WARNING: shift/reduce conflict for INPUT in state 10 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 10 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 10 resolved as shift
WARNING: shift/reduce conflict for VAR in state 14 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 14 resolved as shift
WARNING: shift/reduce conflict for IF in state 14 resolved as shift
WARNING: shift/reduce conflict for id in state 14 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 14 resolved as shift
WARNING: shift/reduce conflict for INPUT in state 14 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 14 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 14 resolved as shift
WARNING: reduce/reduce conflict in state 5 resolved using rule (P -> empty)
WARNING: rejected rule (F -> empty) in state 5
WARNING: reduce/reduce conflict in state 5 resolved using rule (F -> empty)
WARNING: rejected rule (SC -> empty) in state 5
WARNING: reduce/reduce conflict in state 5 resolved using rule (P -> empty)
WARNING: rejected rule (SC -> empty) in state 5
WARNING: reduce/reduce conflict in state 83 resolved using rule (C -> empty)
WARNING: rejected rule (SC -> empty) in state 83
WARNING: Rule (SC -> empty) is never reduced
