Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> P
Rule 1     P -> D P
Rule 2     P -> F P
Rule 3     P -> SC P
Rule 4     P -> empty
Rule 5     D -> VAR T id puntcoma
Rule 6     T -> INT
Rule 7     T -> STRING
Rule 8     T -> BOOLEAN
Rule 9     F -> FUNCTION T1 id parentA A parentC corcheteA C corcheteC
Rule 10    T1 -> T
Rule 11    T1 -> empty
Rule 12    A -> empty
Rule 13    A -> T id A1
Rule 14    A1 -> empty
Rule 15    A1 -> coma T id A1
Rule 16    C -> D C
Rule 17    C -> SC
Rule 18    S -> id igual E puntcoma
Rule 19    S -> id asig E puntcoma
Rule 20    S -> PRINT parentA E parentC puntcoma
Rule 21    S -> INPUT parentA E parentC puntcoma
Rule 22    S -> id parentA L parentC puntcoma
Rule 23    S -> RETURN X
Rule 24    L -> empty
Rule 25    L -> id L1
Rule 26    L1 -> empty
Rule 27    L1 -> coma id L1
Rule 28    X -> E
Rule 29    X -> empty
Rule 30    SC -> WHILE parentA E parentC corcheteA C corcheteC
Rule 31    SC -> IF parentA E parentC S
Rule 32    SC -> S
Rule 33    E -> E or G
Rule 34    E -> G
Rule 35    G -> G menor U
Rule 36    G -> U
Rule 37    U -> U suma V
Rule 38    U -> V
Rule 39    V -> id
Rule 40    V -> entero
Rule 41    V -> cadena
Rule 42    V -> parentA E parentC
Rule 43    V -> id parentA L parentC
Rule 44    empty -> <empty>

Terminals, with rules where they appear

BOOLEAN              : 8
FUNCTION             : 9
IF                   : 31
INPUT                : 21
INT                  : 6
PRINT                : 20
RETURN               : 23
STRING               : 7
VAR                  : 5
WHILE                : 30
asig                 : 19
cadena               : 41
coma                 : 15 27
corcheteA            : 9 30
corcheteC            : 9 30
entero               : 40
error                : 
id                   : 5 9 13 15 18 19 22 25 27 39 43
igual                : 18
menor                : 35
or                   : 33
parentA              : 9 20 21 22 30 31 42 43
parentC              : 9 20 21 22 30 31 42 43
puntcoma             : 5 18 19 20 21 22
suma                 : 37

Nonterminals, with rules where they appear

A                    : 9
A1                   : 13 15
C                    : 9 16 30
D                    : 1 16
E                    : 18 19 20 21 28 30 31 33 42
F                    : 2
G                    : 33 34 35
L                    : 22 43
L1                   : 25 27
P                    : 1 2 3 0
S                    : 31 32
SC                   : 3 17
T                    : 5 10 13 15
T1                   : 9
U                    : 35 36 37
V                    : 37 38
X                    : 23
empty                : 4 11 12 14 24 26 29

Parsing method: LALR

state 0

    (0) S' -> . P
    (1) P -> . D P
    (2) P -> . F P
    (3) P -> . SC P
    (4) P -> . empty
    (5) D -> . VAR T id puntcoma
    (9) F -> . FUNCTION T1 id parentA A parentC corcheteA C corcheteC
    (30) SC -> . WHILE parentA E parentC corcheteA C corcheteC
    (31) SC -> . IF parentA E parentC S
    (32) SC -> . S
    (44) empty -> .
    (18) S -> . id igual E puntcoma
    (19) S -> . id asig E puntcoma
    (20) S -> . PRINT parentA E parentC puntcoma
    (21) S -> . INPUT parentA E parentC puntcoma
    (22) S -> . id parentA L parentC puntcoma
    (23) S -> . RETURN X

    VAR             shift and go to state 11
    FUNCTION        shift and go to state 6
    WHILE           shift and go to state 1
    IF              shift and go to state 13
    $end            reduce using rule 44 (empty -> .)
    id              shift and go to state 4
    PRINT           shift and go to state 2
    INPUT           shift and go to state 12
    RETURN          shift and go to state 3

    D                              shift and go to state 7
    F                              shift and go to state 8
    P                              shift and go to state 9
    S                              shift and go to state 10
    SC                             shift and go to state 14
    empty                          shift and go to state 5

state 1

    (30) SC -> WHILE . parentA E parentC corcheteA C corcheteC

    parentA         shift and go to state 15


state 2

    (20) S -> PRINT . parentA E parentC puntcoma

    parentA         shift and go to state 16


state 3

    (23) S -> RETURN . X
    (28) X -> . E
    (29) X -> . empty
    (33) E -> . E or G
    (34) E -> . G
    (44) empty -> .
    (35) G -> . G menor U
    (36) G -> . U
    (37) U -> . U suma V
    (38) U -> . V
    (39) V -> . id
    (40) V -> . entero
    (41) V -> . cadena
    (42) V -> . parentA E parentC
    (43) V -> . id parentA L parentC

  ! shift/reduce conflict for id resolved as shift
    VAR             reduce using rule 44 (empty -> .)
    FUNCTION        reduce using rule 44 (empty -> .)
    WHILE           reduce using rule 44 (empty -> .)
    IF              reduce using rule 44 (empty -> .)
    PRINT           reduce using rule 44 (empty -> .)
    INPUT           reduce using rule 44 (empty -> .)
    RETURN          reduce using rule 44 (empty -> .)
    $end            reduce using rule 44 (empty -> .)
    corcheteC       reduce using rule 44 (empty -> .)
    id              shift and go to state 19
    entero          shift and go to state 26
    cadena          shift and go to state 20
    parentA         shift and go to state 17

  ! id              [ reduce using rule 44 (empty -> .) ]

    E                              shift and go to state 24
    G                              shift and go to state 18
    U                              shift and go to state 21
    V                              shift and go to state 22
    X                              shift and go to state 23
    empty                          shift and go to state 25

state 4

    (18) S -> id . igual E puntcoma
    (19) S -> id . asig E puntcoma
    (22) S -> id . parentA L parentC puntcoma

    igual           shift and go to state 29
    asig            shift and go to state 28
    parentA         shift and go to state 27


state 5

    (4) P -> empty .

    $end            reduce using rule 4 (P -> empty .)


state 6

    (9) F -> FUNCTION . T1 id parentA A parentC corcheteA C corcheteC
    (10) T1 -> . T
    (11) T1 -> . empty
    (6) T -> . INT
    (7) T -> . STRING
    (8) T -> . BOOLEAN
    (44) empty -> .

    INT             shift and go to state 31
    STRING          shift and go to state 30
    BOOLEAN         shift and go to state 33
    id              reduce using rule 44 (empty -> .)

    T                              shift and go to state 34
    empty                          shift and go to state 35
    T1                             shift and go to state 32

state 7

    (1) P -> D . P
    (1) P -> . D P
    (2) P -> . F P
    (3) P -> . SC P
    (4) P -> . empty
    (5) D -> . VAR T id puntcoma
    (9) F -> . FUNCTION T1 id parentA A parentC corcheteA C corcheteC
    (30) SC -> . WHILE parentA E parentC corcheteA C corcheteC
    (31) SC -> . IF parentA E parentC S
    (32) SC -> . S
    (44) empty -> .
    (18) S -> . id igual E puntcoma
    (19) S -> . id asig E puntcoma
    (20) S -> . PRINT parentA E parentC puntcoma
    (21) S -> . INPUT parentA E parentC puntcoma
    (22) S -> . id parentA L parentC puntcoma
    (23) S -> . RETURN X

    VAR             shift and go to state 11
    FUNCTION        shift and go to state 6
    WHILE           shift and go to state 1
    IF              shift and go to state 13
    $end            reduce using rule 44 (empty -> .)
    id              shift and go to state 4
    PRINT           shift and go to state 2
    INPUT           shift and go to state 12
    RETURN          shift and go to state 3

    D                              shift and go to state 7
    F                              shift and go to state 8
    P                              shift and go to state 36
    S                              shift and go to state 10
    SC                             shift and go to state 14
    empty                          shift and go to state 5

state 8

    (2) P -> F . P
    (1) P -> . D P
    (2) P -> . F P
    (3) P -> . SC P
    (4) P -> . empty
    (5) D -> . VAR T id puntcoma
    (9) F -> . FUNCTION T1 id parentA A parentC corcheteA C corcheteC
    (30) SC -> . WHILE parentA E parentC corcheteA C corcheteC
    (31) SC -> . IF parentA E parentC S
    (32) SC -> . S
    (44) empty -> .
    (18) S -> . id igual E puntcoma
    (19) S -> . id asig E puntcoma
    (20) S -> . PRINT parentA E parentC puntcoma
    (21) S -> . INPUT parentA E parentC puntcoma
    (22) S -> . id parentA L parentC puntcoma
    (23) S -> . RETURN X

    VAR             shift and go to state 11
    FUNCTION        shift and go to state 6
    WHILE           shift and go to state 1
    IF              shift and go to state 13
    $end            reduce using rule 44 (empty -> .)
    id              shift and go to state 4
    PRINT           shift and go to state 2
    INPUT           shift and go to state 12
    RETURN          shift and go to state 3

    D                              shift and go to state 7
    F                              shift and go to state 8
    P                              shift and go to state 37
    S                              shift and go to state 10
    SC                             shift and go to state 14
    empty                          shift and go to state 5

state 9

    (0) S' -> P .



state 10

    (32) SC -> S .

    VAR             reduce using rule 32 (SC -> S .)
    FUNCTION        reduce using rule 32 (SC -> S .)
    WHILE           reduce using rule 32 (SC -> S .)
    IF              reduce using rule 32 (SC -> S .)
    id              reduce using rule 32 (SC -> S .)
    PRINT           reduce using rule 32 (SC -> S .)
    INPUT           reduce using rule 32 (SC -> S .)
    RETURN          reduce using rule 32 (SC -> S .)
    $end            reduce using rule 32 (SC -> S .)
    corcheteC       reduce using rule 32 (SC -> S .)


state 11

    (5) D -> VAR . T id puntcoma
    (6) T -> . INT
    (7) T -> . STRING
    (8) T -> . BOOLEAN

    INT             shift and go to state 31
    STRING          shift and go to state 30
    BOOLEAN         shift and go to state 33

    T                              shift and go to state 38

state 12

    (21) S -> INPUT . parentA E parentC puntcoma

    parentA         shift and go to state 39


state 13

    (31) SC -> IF . parentA E parentC S

    parentA         shift and go to state 40


state 14

    (3) P -> SC . P
    (1) P -> . D P
    (2) P -> . F P
    (3) P -> . SC P
    (4) P -> . empty
    (5) D -> . VAR T id puntcoma
    (9) F -> . FUNCTION T1 id parentA A parentC corcheteA C corcheteC
    (30) SC -> . WHILE parentA E parentC corcheteA C corcheteC
    (31) SC -> . IF parentA E parentC S
    (32) SC -> . S
    (44) empty -> .
    (18) S -> . id igual E puntcoma
    (19) S -> . id asig E puntcoma
    (20) S -> . PRINT parentA E parentC puntcoma
    (21) S -> . INPUT parentA E parentC puntcoma
    (22) S -> . id parentA L parentC puntcoma
    (23) S -> . RETURN X

    VAR             shift and go to state 11
    FUNCTION        shift and go to state 6
    WHILE           shift and go to state 1
    IF              shift and go to state 13
    $end            reduce using rule 44 (empty -> .)
    id              shift and go to state 4
    PRINT           shift and go to state 2
    INPUT           shift and go to state 12
    RETURN          shift and go to state 3

    D                              shift and go to state 7
    F                              shift and go to state 8
    P                              shift and go to state 41
    S                              shift and go to state 10
    SC                             shift and go to state 14
    empty                          shift and go to state 5

state 15

    (30) SC -> WHILE parentA . E parentC corcheteA C corcheteC
    (33) E -> . E or G
    (34) E -> . G
    (35) G -> . G menor U
    (36) G -> . U
    (37) U -> . U suma V
    (38) U -> . V
    (39) V -> . id
    (40) V -> . entero
    (41) V -> . cadena
    (42) V -> . parentA E parentC
    (43) V -> . id parentA L parentC

    id              shift and go to state 19
    entero          shift and go to state 26
    cadena          shift and go to state 20
    parentA         shift and go to state 17

    E                              shift and go to state 42
    G                              shift and go to state 18
    U                              shift and go to state 21
    V                              shift and go to state 22

state 16

    (20) S -> PRINT parentA . E parentC puntcoma
    (33) E -> . E or G
    (34) E -> . G
    (35) G -> . G menor U
    (36) G -> . U
    (37) U -> . U suma V
    (38) U -> . V
    (39) V -> . id
    (40) V -> . entero
    (41) V -> . cadena
    (42) V -> . parentA E parentC
    (43) V -> . id parentA L parentC

    id              shift and go to state 19
    entero          shift and go to state 26
    cadena          shift and go to state 20
    parentA         shift and go to state 17

    U                              shift and go to state 21
    E                              shift and go to state 43
    G                              shift and go to state 18
    V                              shift and go to state 22

state 17

    (42) V -> parentA . E parentC
    (33) E -> . E or G
    (34) E -> . G
    (35) G -> . G menor U
    (36) G -> . U
    (37) U -> . U suma V
    (38) U -> . V
    (39) V -> . id
    (40) V -> . entero
    (41) V -> . cadena
    (42) V -> . parentA E parentC
    (43) V -> . id parentA L parentC

    id              shift and go to state 19
    entero          shift and go to state 26
    cadena          shift and go to state 20
    parentA         shift and go to state 17

    U                              shift and go to state 21
    E                              shift and go to state 44
    G                              shift and go to state 18
    V                              shift and go to state 22

state 18

    (34) E -> G .
    (35) G -> G . menor U

    parentC         reduce using rule 34 (E -> G .)
    or              reduce using rule 34 (E -> G .)
    VAR             reduce using rule 34 (E -> G .)
    FUNCTION        reduce using rule 34 (E -> G .)
    WHILE           reduce using rule 34 (E -> G .)
    IF              reduce using rule 34 (E -> G .)
    id              reduce using rule 34 (E -> G .)
    PRINT           reduce using rule 34 (E -> G .)
    INPUT           reduce using rule 34 (E -> G .)
    RETURN          reduce using rule 34 (E -> G .)
    $end            reduce using rule 34 (E -> G .)
    corcheteC       reduce using rule 34 (E -> G .)
    puntcoma        reduce using rule 34 (E -> G .)
    menor           shift and go to state 45


state 19

    (39) V -> id .
    (43) V -> id . parentA L parentC

    suma            reduce using rule 39 (V -> id .)
    menor           reduce using rule 39 (V -> id .)
    puntcoma        reduce using rule 39 (V -> id .)
    or              reduce using rule 39 (V -> id .)
    parentC         reduce using rule 39 (V -> id .)
    VAR             reduce using rule 39 (V -> id .)
    FUNCTION        reduce using rule 39 (V -> id .)
    WHILE           reduce using rule 39 (V -> id .)
    IF              reduce using rule 39 (V -> id .)
    id              reduce using rule 39 (V -> id .)
    PRINT           reduce using rule 39 (V -> id .)
    INPUT           reduce using rule 39 (V -> id .)
    RETURN          reduce using rule 39 (V -> id .)
    $end            reduce using rule 39 (V -> id .)
    corcheteC       reduce using rule 39 (V -> id .)
    parentA         shift and go to state 46


state 20

    (41) V -> cadena .

    suma            reduce using rule 41 (V -> cadena .)
    menor           reduce using rule 41 (V -> cadena .)
    puntcoma        reduce using rule 41 (V -> cadena .)
    or              reduce using rule 41 (V -> cadena .)
    parentC         reduce using rule 41 (V -> cadena .)
    VAR             reduce using rule 41 (V -> cadena .)
    FUNCTION        reduce using rule 41 (V -> cadena .)
    WHILE           reduce using rule 41 (V -> cadena .)
    IF              reduce using rule 41 (V -> cadena .)
    id              reduce using rule 41 (V -> cadena .)
    PRINT           reduce using rule 41 (V -> cadena .)
    INPUT           reduce using rule 41 (V -> cadena .)
    RETURN          reduce using rule 41 (V -> cadena .)
    $end            reduce using rule 41 (V -> cadena .)
    corcheteC       reduce using rule 41 (V -> cadena .)


state 21

    (36) G -> U .
    (37) U -> U . suma V

    menor           reduce using rule 36 (G -> U .)
    parentC         reduce using rule 36 (G -> U .)
    or              reduce using rule 36 (G -> U .)
    VAR             reduce using rule 36 (G -> U .)
    FUNCTION        reduce using rule 36 (G -> U .)
    WHILE           reduce using rule 36 (G -> U .)
    IF              reduce using rule 36 (G -> U .)
    id              reduce using rule 36 (G -> U .)
    PRINT           reduce using rule 36 (G -> U .)
    INPUT           reduce using rule 36 (G -> U .)
    RETURN          reduce using rule 36 (G -> U .)
    $end            reduce using rule 36 (G -> U .)
    corcheteC       reduce using rule 36 (G -> U .)
    puntcoma        reduce using rule 36 (G -> U .)
    suma            shift and go to state 47


state 22

    (38) U -> V .

    suma            reduce using rule 38 (U -> V .)
    menor           reduce using rule 38 (U -> V .)
    parentC         reduce using rule 38 (U -> V .)
    or              reduce using rule 38 (U -> V .)
    puntcoma        reduce using rule 38 (U -> V .)
    VAR             reduce using rule 38 (U -> V .)
    FUNCTION        reduce using rule 38 (U -> V .)
    WHILE           reduce using rule 38 (U -> V .)
    IF              reduce using rule 38 (U -> V .)
    id              reduce using rule 38 (U -> V .)
    PRINT           reduce using rule 38 (U -> V .)
    INPUT           reduce using rule 38 (U -> V .)
    RETURN          reduce using rule 38 (U -> V .)
    $end            reduce using rule 38 (U -> V .)
    corcheteC       reduce using rule 38 (U -> V .)


state 23

    (23) S -> RETURN X .

    VAR             reduce using rule 23 (S -> RETURN X .)
    FUNCTION        reduce using rule 23 (S -> RETURN X .)
    WHILE           reduce using rule 23 (S -> RETURN X .)
    IF              reduce using rule 23 (S -> RETURN X .)
    id              reduce using rule 23 (S -> RETURN X .)
    PRINT           reduce using rule 23 (S -> RETURN X .)
    INPUT           reduce using rule 23 (S -> RETURN X .)
    RETURN          reduce using rule 23 (S -> RETURN X .)
    $end            reduce using rule 23 (S -> RETURN X .)
    corcheteC       reduce using rule 23 (S -> RETURN X .)


state 24

    (28) X -> E .
    (33) E -> E . or G

    VAR             reduce using rule 28 (X -> E .)
    FUNCTION        reduce using rule 28 (X -> E .)
    WHILE           reduce using rule 28 (X -> E .)
    IF              reduce using rule 28 (X -> E .)
    id              reduce using rule 28 (X -> E .)
    PRINT           reduce using rule 28 (X -> E .)
    INPUT           reduce using rule 28 (X -> E .)
    RETURN          reduce using rule 28 (X -> E .)
    $end            reduce using rule 28 (X -> E .)
    corcheteC       reduce using rule 28 (X -> E .)
    or              shift and go to state 48


state 25

    (29) X -> empty .

    VAR             reduce using rule 29 (X -> empty .)
    FUNCTION        reduce using rule 29 (X -> empty .)
    WHILE           reduce using rule 29 (X -> empty .)
    IF              reduce using rule 29 (X -> empty .)
    id              reduce using rule 29 (X -> empty .)
    PRINT           reduce using rule 29 (X -> empty .)
    INPUT           reduce using rule 29 (X -> empty .)
    RETURN          reduce using rule 29 (X -> empty .)
    $end            reduce using rule 29 (X -> empty .)
    corcheteC       reduce using rule 29 (X -> empty .)


state 26

    (40) V -> entero .

    suma            reduce using rule 40 (V -> entero .)
    menor           reduce using rule 40 (V -> entero .)
    puntcoma        reduce using rule 40 (V -> entero .)
    or              reduce using rule 40 (V -> entero .)
    parentC         reduce using rule 40 (V -> entero .)
    VAR             reduce using rule 40 (V -> entero .)
    FUNCTION        reduce using rule 40 (V -> entero .)
    WHILE           reduce using rule 40 (V -> entero .)
    IF              reduce using rule 40 (V -> entero .)
    id              reduce using rule 40 (V -> entero .)
    PRINT           reduce using rule 40 (V -> entero .)
    INPUT           reduce using rule 40 (V -> entero .)
    RETURN          reduce using rule 40 (V -> entero .)
    $end            reduce using rule 40 (V -> entero .)
    corcheteC       reduce using rule 40 (V -> entero .)


state 27

    (22) S -> id parentA . L parentC puntcoma
    (24) L -> . empty
    (25) L -> . id L1
    (44) empty -> .

    id              shift and go to state 50
    parentC         reduce using rule 44 (empty -> .)

    L                              shift and go to state 49
    empty                          shift and go to state 51

state 28

    (19) S -> id asig . E puntcoma
    (33) E -> . E or G
    (34) E -> . G
    (35) G -> . G menor U
    (36) G -> . U
    (37) U -> . U suma V
    (38) U -> . V
    (39) V -> . id
    (40) V -> . entero
    (41) V -> . cadena
    (42) V -> . parentA E parentC
    (43) V -> . id parentA L parentC

    id              shift and go to state 19
    entero          shift and go to state 26
    cadena          shift and go to state 20
    parentA         shift and go to state 17

    U                              shift and go to state 21
    E                              shift and go to state 52
    G                              shift and go to state 18
    V                              shift and go to state 22

state 29

    (18) S -> id igual . E puntcoma
    (33) E -> . E or G
    (34) E -> . G
    (35) G -> . G menor U
    (36) G -> . U
    (37) U -> . U suma V
    (38) U -> . V
    (39) V -> . id
    (40) V -> . entero
    (41) V -> . cadena
    (42) V -> . parentA E parentC
    (43) V -> . id parentA L parentC

    id              shift and go to state 19
    entero          shift and go to state 26
    cadena          shift and go to state 20
    parentA         shift and go to state 17

    U                              shift and go to state 21
    E                              shift and go to state 53
    G                              shift and go to state 18
    V                              shift and go to state 22

state 30

    (7) T -> STRING .

    id              reduce using rule 7 (T -> STRING .)


state 31

    (6) T -> INT .

    id              reduce using rule 6 (T -> INT .)


state 32

    (9) F -> FUNCTION T1 . id parentA A parentC corcheteA C corcheteC

    id              shift and go to state 54


state 33

    (8) T -> BOOLEAN .

    id              reduce using rule 8 (T -> BOOLEAN .)


state 34

    (10) T1 -> T .

    id              reduce using rule 10 (T1 -> T .)


state 35

    (11) T1 -> empty .

    id              reduce using rule 11 (T1 -> empty .)


state 36

    (1) P -> D P .

    $end            reduce using rule 1 (P -> D P .)


state 37

    (2) P -> F P .

    $end            reduce using rule 2 (P -> F P .)


state 38

    (5) D -> VAR T . id puntcoma

    id              shift and go to state 55


state 39

    (21) S -> INPUT parentA . E parentC puntcoma
    (33) E -> . E or G
    (34) E -> . G
    (35) G -> . G menor U
    (36) G -> . U
    (37) U -> . U suma V
    (38) U -> . V
    (39) V -> . id
    (40) V -> . entero
    (41) V -> . cadena
    (42) V -> . parentA E parentC
    (43) V -> . id parentA L parentC

    id              shift and go to state 19
    entero          shift and go to state 26
    cadena          shift and go to state 20
    parentA         shift and go to state 17

    U                              shift and go to state 21
    E                              shift and go to state 56
    G                              shift and go to state 18
    V                              shift and go to state 22

state 40

    (31) SC -> IF parentA . E parentC S
    (33) E -> . E or G
    (34) E -> . G
    (35) G -> . G menor U
    (36) G -> . U
    (37) U -> . U suma V
    (38) U -> . V
    (39) V -> . id
    (40) V -> . entero
    (41) V -> . cadena
    (42) V -> . parentA E parentC
    (43) V -> . id parentA L parentC

    id              shift and go to state 19
    entero          shift and go to state 26
    cadena          shift and go to state 20
    parentA         shift and go to state 17

    E                              shift and go to state 57
    G                              shift and go to state 18
    U                              shift and go to state 21
    V                              shift and go to state 22

state 41

    (3) P -> SC P .

    $end            reduce using rule 3 (P -> SC P .)


state 42

    (30) SC -> WHILE parentA E . parentC corcheteA C corcheteC
    (33) E -> E . or G

    parentC         shift and go to state 58
    or              shift and go to state 48


state 43

    (20) S -> PRINT parentA E . parentC puntcoma
    (33) E -> E . or G

    parentC         shift and go to state 59
    or              shift and go to state 48


state 44

    (42) V -> parentA E . parentC
    (33) E -> E . or G

    parentC         shift and go to state 60
    or              shift and go to state 48


state 45

    (35) G -> G menor . U
    (37) U -> . U suma V
    (38) U -> . V
    (39) V -> . id
    (40) V -> . entero
    (41) V -> . cadena
    (42) V -> . parentA E parentC
    (43) V -> . id parentA L parentC

    id              shift and go to state 19
    entero          shift and go to state 26
    cadena          shift and go to state 20
    parentA         shift and go to state 17

    U                              shift and go to state 61
    V                              shift and go to state 22

state 46

    (43) V -> id parentA . L parentC
    (24) L -> . empty
    (25) L -> . id L1
    (44) empty -> .

    id              shift and go to state 50
    parentC         reduce using rule 44 (empty -> .)

    L                              shift and go to state 62
    empty                          shift and go to state 51

state 47

    (37) U -> U suma . V
    (39) V -> . id
    (40) V -> . entero
    (41) V -> . cadena
    (42) V -> . parentA E parentC
    (43) V -> . id parentA L parentC

    id              shift and go to state 19
    entero          shift and go to state 26
    cadena          shift and go to state 20
    parentA         shift and go to state 17

    V                              shift and go to state 63

state 48

    (33) E -> E or . G
    (35) G -> . G menor U
    (36) G -> . U
    (37) U -> . U suma V
    (38) U -> . V
    (39) V -> . id
    (40) V -> . entero
    (41) V -> . cadena
    (42) V -> . parentA E parentC
    (43) V -> . id parentA L parentC

    id              shift and go to state 19
    entero          shift and go to state 26
    cadena          shift and go to state 20
    parentA         shift and go to state 17

    U                              shift and go to state 21
    G                              shift and go to state 64
    V                              shift and go to state 22

state 49

    (22) S -> id parentA L . parentC puntcoma

    parentC         shift and go to state 65


state 50

    (25) L -> id . L1
    (26) L1 -> . empty
    (27) L1 -> . coma id L1
    (44) empty -> .

    coma            shift and go to state 66
    parentC         reduce using rule 44 (empty -> .)

    empty                          shift and go to state 67
    L1                             shift and go to state 68

state 51

    (24) L -> empty .

    parentC         reduce using rule 24 (L -> empty .)


state 52

    (19) S -> id asig E . puntcoma
    (33) E -> E . or G

    puntcoma        shift and go to state 69
    or              shift and go to state 48


state 53

    (18) S -> id igual E . puntcoma
    (33) E -> E . or G

    puntcoma        shift and go to state 70
    or              shift and go to state 48


state 54

    (9) F -> FUNCTION T1 id . parentA A parentC corcheteA C corcheteC

    parentA         shift and go to state 71


state 55

    (5) D -> VAR T id . puntcoma

    puntcoma        shift and go to state 72


state 56

    (21) S -> INPUT parentA E . parentC puntcoma
    (33) E -> E . or G

    parentC         shift and go to state 73
    or              shift and go to state 48


state 57

    (31) SC -> IF parentA E . parentC S
    (33) E -> E . or G

    parentC         shift and go to state 74
    or              shift and go to state 48


state 58

    (30) SC -> WHILE parentA E parentC . corcheteA C corcheteC

    corcheteA       shift and go to state 75


state 59

    (20) S -> PRINT parentA E parentC . puntcoma

    puntcoma        shift and go to state 76


state 60

    (42) V -> parentA E parentC .

    suma            reduce using rule 42 (V -> parentA E parentC .)
    menor           reduce using rule 42 (V -> parentA E parentC .)
    puntcoma        reduce using rule 42 (V -> parentA E parentC .)
    or              reduce using rule 42 (V -> parentA E parentC .)
    parentC         reduce using rule 42 (V -> parentA E parentC .)
    VAR             reduce using rule 42 (V -> parentA E parentC .)
    FUNCTION        reduce using rule 42 (V -> parentA E parentC .)
    WHILE           reduce using rule 42 (V -> parentA E parentC .)
    IF              reduce using rule 42 (V -> parentA E parentC .)
    id              reduce using rule 42 (V -> parentA E parentC .)
    PRINT           reduce using rule 42 (V -> parentA E parentC .)
    INPUT           reduce using rule 42 (V -> parentA E parentC .)
    RETURN          reduce using rule 42 (V -> parentA E parentC .)
    $end            reduce using rule 42 (V -> parentA E parentC .)
    corcheteC       reduce using rule 42 (V -> parentA E parentC .)


state 61

    (35) G -> G menor U .
    (37) U -> U . suma V

    menor           reduce using rule 35 (G -> G menor U .)
    parentC         reduce using rule 35 (G -> G menor U .)
    or              reduce using rule 35 (G -> G menor U .)
    VAR             reduce using rule 35 (G -> G menor U .)
    FUNCTION        reduce using rule 35 (G -> G menor U .)
    WHILE           reduce using rule 35 (G -> G menor U .)
    IF              reduce using rule 35 (G -> G menor U .)
    id              reduce using rule 35 (G -> G menor U .)
    PRINT           reduce using rule 35 (G -> G menor U .)
    INPUT           reduce using rule 35 (G -> G menor U .)
    RETURN          reduce using rule 35 (G -> G menor U .)
    $end            reduce using rule 35 (G -> G menor U .)
    corcheteC       reduce using rule 35 (G -> G menor U .)
    puntcoma        reduce using rule 35 (G -> G menor U .)
    suma            shift and go to state 47


state 62

    (43) V -> id parentA L . parentC

    parentC         shift and go to state 77


state 63

    (37) U -> U suma V .

    suma            reduce using rule 37 (U -> U suma V .)
    menor           reduce using rule 37 (U -> U suma V .)
    parentC         reduce using rule 37 (U -> U suma V .)
    or              reduce using rule 37 (U -> U suma V .)
    puntcoma        reduce using rule 37 (U -> U suma V .)
    VAR             reduce using rule 37 (U -> U suma V .)
    FUNCTION        reduce using rule 37 (U -> U suma V .)
    WHILE           reduce using rule 37 (U -> U suma V .)
    IF              reduce using rule 37 (U -> U suma V .)
    id              reduce using rule 37 (U -> U suma V .)
    PRINT           reduce using rule 37 (U -> U suma V .)
    INPUT           reduce using rule 37 (U -> U suma V .)
    RETURN          reduce using rule 37 (U -> U suma V .)
    $end            reduce using rule 37 (U -> U suma V .)
    corcheteC       reduce using rule 37 (U -> U suma V .)


state 64

    (33) E -> E or G .
    (35) G -> G . menor U

    parentC         reduce using rule 33 (E -> E or G .)
    or              reduce using rule 33 (E -> E or G .)
    VAR             reduce using rule 33 (E -> E or G .)
    FUNCTION        reduce using rule 33 (E -> E or G .)
    WHILE           reduce using rule 33 (E -> E or G .)
    IF              reduce using rule 33 (E -> E or G .)
    id              reduce using rule 33 (E -> E or G .)
    PRINT           reduce using rule 33 (E -> E or G .)
    INPUT           reduce using rule 33 (E -> E or G .)
    RETURN          reduce using rule 33 (E -> E or G .)
    $end            reduce using rule 33 (E -> E or G .)
    corcheteC       reduce using rule 33 (E -> E or G .)
    puntcoma        reduce using rule 33 (E -> E or G .)
    menor           shift and go to state 45


state 65

    (22) S -> id parentA L parentC . puntcoma

    puntcoma        shift and go to state 78


state 66

    (27) L1 -> coma . id L1

    id              shift and go to state 79


state 67

    (26) L1 -> empty .

    parentC         reduce using rule 26 (L1 -> empty .)


state 68

    (25) L -> id L1 .

    parentC         reduce using rule 25 (L -> id L1 .)


state 69

    (19) S -> id asig E puntcoma .

    VAR             reduce using rule 19 (S -> id asig E puntcoma .)
    FUNCTION        reduce using rule 19 (S -> id asig E puntcoma .)
    WHILE           reduce using rule 19 (S -> id asig E puntcoma .)
    IF              reduce using rule 19 (S -> id asig E puntcoma .)
    id              reduce using rule 19 (S -> id asig E puntcoma .)
    PRINT           reduce using rule 19 (S -> id asig E puntcoma .)
    INPUT           reduce using rule 19 (S -> id asig E puntcoma .)
    RETURN          reduce using rule 19 (S -> id asig E puntcoma .)
    $end            reduce using rule 19 (S -> id asig E puntcoma .)
    corcheteC       reduce using rule 19 (S -> id asig E puntcoma .)


state 70

    (18) S -> id igual E puntcoma .

    VAR             reduce using rule 18 (S -> id igual E puntcoma .)
    FUNCTION        reduce using rule 18 (S -> id igual E puntcoma .)
    WHILE           reduce using rule 18 (S -> id igual E puntcoma .)
    IF              reduce using rule 18 (S -> id igual E puntcoma .)
    id              reduce using rule 18 (S -> id igual E puntcoma .)
    PRINT           reduce using rule 18 (S -> id igual E puntcoma .)
    INPUT           reduce using rule 18 (S -> id igual E puntcoma .)
    RETURN          reduce using rule 18 (S -> id igual E puntcoma .)
    $end            reduce using rule 18 (S -> id igual E puntcoma .)
    corcheteC       reduce using rule 18 (S -> id igual E puntcoma .)


state 71

    (9) F -> FUNCTION T1 id parentA . A parentC corcheteA C corcheteC
    (12) A -> . empty
    (13) A -> . T id A1
    (44) empty -> .
    (6) T -> . INT
    (7) T -> . STRING
    (8) T -> . BOOLEAN

    parentC         reduce using rule 44 (empty -> .)
    INT             shift and go to state 31
    STRING          shift and go to state 30
    BOOLEAN         shift and go to state 33

    A                              shift and go to state 80
    T                              shift and go to state 81
    empty                          shift and go to state 82

state 72

    (5) D -> VAR T id puntcoma .

    VAR             reduce using rule 5 (D -> VAR T id puntcoma .)
    FUNCTION        reduce using rule 5 (D -> VAR T id puntcoma .)
    WHILE           reduce using rule 5 (D -> VAR T id puntcoma .)
    IF              reduce using rule 5 (D -> VAR T id puntcoma .)
    id              reduce using rule 5 (D -> VAR T id puntcoma .)
    PRINT           reduce using rule 5 (D -> VAR T id puntcoma .)
    INPUT           reduce using rule 5 (D -> VAR T id puntcoma .)
    RETURN          reduce using rule 5 (D -> VAR T id puntcoma .)
    $end            reduce using rule 5 (D -> VAR T id puntcoma .)


state 73

    (21) S -> INPUT parentA E parentC . puntcoma

    puntcoma        shift and go to state 83


state 74

    (31) SC -> IF parentA E parentC . S
    (18) S -> . id igual E puntcoma
    (19) S -> . id asig E puntcoma
    (20) S -> . PRINT parentA E parentC puntcoma
    (21) S -> . INPUT parentA E parentC puntcoma
    (22) S -> . id parentA L parentC puntcoma
    (23) S -> . RETURN X

    id              shift and go to state 4
    PRINT           shift and go to state 2
    INPUT           shift and go to state 12
    RETURN          shift and go to state 3

    S                              shift and go to state 84

state 75

    (30) SC -> WHILE parentA E parentC corcheteA . C corcheteC
    (16) C -> . D C
    (17) C -> . SC
    (5) D -> . VAR T id puntcoma
    (30) SC -> . WHILE parentA E parentC corcheteA C corcheteC
    (31) SC -> . IF parentA E parentC S
    (32) SC -> . S
    (18) S -> . id igual E puntcoma
    (19) S -> . id asig E puntcoma
    (20) S -> . PRINT parentA E parentC puntcoma
    (21) S -> . INPUT parentA E parentC puntcoma
    (22) S -> . id parentA L parentC puntcoma
    (23) S -> . RETURN X

    VAR             shift and go to state 11
    WHILE           shift and go to state 1
    IF              shift and go to state 13
    id              shift and go to state 4
    PRINT           shift and go to state 2
    INPUT           shift and go to state 12
    RETURN          shift and go to state 3

    C                              shift and go to state 85
    D                              shift and go to state 86
    S                              shift and go to state 10
    SC                             shift and go to state 87

state 76

    (20) S -> PRINT parentA E parentC puntcoma .

    VAR             reduce using rule 20 (S -> PRINT parentA E parentC puntcoma .)
    FUNCTION        reduce using rule 20 (S -> PRINT parentA E parentC puntcoma .)
    WHILE           reduce using rule 20 (S -> PRINT parentA E parentC puntcoma .)
    IF              reduce using rule 20 (S -> PRINT parentA E parentC puntcoma .)
    id              reduce using rule 20 (S -> PRINT parentA E parentC puntcoma .)
    PRINT           reduce using rule 20 (S -> PRINT parentA E parentC puntcoma .)
    INPUT           reduce using rule 20 (S -> PRINT parentA E parentC puntcoma .)
    RETURN          reduce using rule 20 (S -> PRINT parentA E parentC puntcoma .)
    $end            reduce using rule 20 (S -> PRINT parentA E parentC puntcoma .)
    corcheteC       reduce using rule 20 (S -> PRINT parentA E parentC puntcoma .)


state 77

    (43) V -> id parentA L parentC .

    suma            reduce using rule 43 (V -> id parentA L parentC .)
    menor           reduce using rule 43 (V -> id parentA L parentC .)
    puntcoma        reduce using rule 43 (V -> id parentA L parentC .)
    or              reduce using rule 43 (V -> id parentA L parentC .)
    parentC         reduce using rule 43 (V -> id parentA L parentC .)
    VAR             reduce using rule 43 (V -> id parentA L parentC .)
    FUNCTION        reduce using rule 43 (V -> id parentA L parentC .)
    WHILE           reduce using rule 43 (V -> id parentA L parentC .)
    IF              reduce using rule 43 (V -> id parentA L parentC .)
    id              reduce using rule 43 (V -> id parentA L parentC .)
    PRINT           reduce using rule 43 (V -> id parentA L parentC .)
    INPUT           reduce using rule 43 (V -> id parentA L parentC .)
    RETURN          reduce using rule 43 (V -> id parentA L parentC .)
    $end            reduce using rule 43 (V -> id parentA L parentC .)
    corcheteC       reduce using rule 43 (V -> id parentA L parentC .)


state 78

    (22) S -> id parentA L parentC puntcoma .

    VAR             reduce using rule 22 (S -> id parentA L parentC puntcoma .)
    FUNCTION        reduce using rule 22 (S -> id parentA L parentC puntcoma .)
    WHILE           reduce using rule 22 (S -> id parentA L parentC puntcoma .)
    IF              reduce using rule 22 (S -> id parentA L parentC puntcoma .)
    id              reduce using rule 22 (S -> id parentA L parentC puntcoma .)
    PRINT           reduce using rule 22 (S -> id parentA L parentC puntcoma .)
    INPUT           reduce using rule 22 (S -> id parentA L parentC puntcoma .)
    RETURN          reduce using rule 22 (S -> id parentA L parentC puntcoma .)
    $end            reduce using rule 22 (S -> id parentA L parentC puntcoma .)
    corcheteC       reduce using rule 22 (S -> id parentA L parentC puntcoma .)


state 79

    (27) L1 -> coma id . L1
    (26) L1 -> . empty
    (27) L1 -> . coma id L1
    (44) empty -> .

    coma            shift and go to state 66
    parentC         reduce using rule 44 (empty -> .)

    empty                          shift and go to state 67
    L1                             shift and go to state 88

state 80

    (9) F -> FUNCTION T1 id parentA A . parentC corcheteA C corcheteC

    parentC         shift and go to state 89


state 81

    (13) A -> T . id A1

    id              shift and go to state 90


state 82

    (12) A -> empty .

    parentC         reduce using rule 12 (A -> empty .)


state 83

    (21) S -> INPUT parentA E parentC puntcoma .

    VAR             reduce using rule 21 (S -> INPUT parentA E parentC puntcoma .)
    FUNCTION        reduce using rule 21 (S -> INPUT parentA E parentC puntcoma .)
    WHILE           reduce using rule 21 (S -> INPUT parentA E parentC puntcoma .)
    IF              reduce using rule 21 (S -> INPUT parentA E parentC puntcoma .)
    id              reduce using rule 21 (S -> INPUT parentA E parentC puntcoma .)
    PRINT           reduce using rule 21 (S -> INPUT parentA E parentC puntcoma .)
    INPUT           reduce using rule 21 (S -> INPUT parentA E parentC puntcoma .)
    RETURN          reduce using rule 21 (S -> INPUT parentA E parentC puntcoma .)
    $end            reduce using rule 21 (S -> INPUT parentA E parentC puntcoma .)
    corcheteC       reduce using rule 21 (S -> INPUT parentA E parentC puntcoma .)


state 84

    (31) SC -> IF parentA E parentC S .

    VAR             reduce using rule 31 (SC -> IF parentA E parentC S .)
    FUNCTION        reduce using rule 31 (SC -> IF parentA E parentC S .)
    WHILE           reduce using rule 31 (SC -> IF parentA E parentC S .)
    IF              reduce using rule 31 (SC -> IF parentA E parentC S .)
    id              reduce using rule 31 (SC -> IF parentA E parentC S .)
    PRINT           reduce using rule 31 (SC -> IF parentA E parentC S .)
    INPUT           reduce using rule 31 (SC -> IF parentA E parentC S .)
    RETURN          reduce using rule 31 (SC -> IF parentA E parentC S .)
    $end            reduce using rule 31 (SC -> IF parentA E parentC S .)
    corcheteC       reduce using rule 31 (SC -> IF parentA E parentC S .)


state 85

    (30) SC -> WHILE parentA E parentC corcheteA C . corcheteC

    corcheteC       shift and go to state 91


state 86

    (16) C -> D . C
    (16) C -> . D C
    (17) C -> . SC
    (5) D -> . VAR T id puntcoma
    (30) SC -> . WHILE parentA E parentC corcheteA C corcheteC
    (31) SC -> . IF parentA E parentC S
    (32) SC -> . S
    (18) S -> . id igual E puntcoma
    (19) S -> . id asig E puntcoma
    (20) S -> . PRINT parentA E parentC puntcoma
    (21) S -> . INPUT parentA E parentC puntcoma
    (22) S -> . id parentA L parentC puntcoma
    (23) S -> . RETURN X

    VAR             shift and go to state 11
    WHILE           shift and go to state 1
    IF              shift and go to state 13
    id              shift and go to state 4
    PRINT           shift and go to state 2
    INPUT           shift and go to state 12
    RETURN          shift and go to state 3

    C                              shift and go to state 92
    D                              shift and go to state 86
    S                              shift and go to state 10
    SC                             shift and go to state 87

state 87

    (17) C -> SC .

    corcheteC       reduce using rule 17 (C -> SC .)


state 88

    (27) L1 -> coma id L1 .

    parentC         reduce using rule 27 (L1 -> coma id L1 .)


state 89

    (9) F -> FUNCTION T1 id parentA A parentC . corcheteA C corcheteC

    corcheteA       shift and go to state 93


state 90

    (13) A -> T id . A1
    (14) A1 -> . empty
    (15) A1 -> . coma T id A1
    (44) empty -> .

    coma            shift and go to state 95
    parentC         reduce using rule 44 (empty -> .)

    A1                             shift and go to state 94
    empty                          shift and go to state 96

state 91

    (30) SC -> WHILE parentA E parentC corcheteA C corcheteC .

    VAR             reduce using rule 30 (SC -> WHILE parentA E parentC corcheteA C corcheteC .)
    FUNCTION        reduce using rule 30 (SC -> WHILE parentA E parentC corcheteA C corcheteC .)
    WHILE           reduce using rule 30 (SC -> WHILE parentA E parentC corcheteA C corcheteC .)
    IF              reduce using rule 30 (SC -> WHILE parentA E parentC corcheteA C corcheteC .)
    id              reduce using rule 30 (SC -> WHILE parentA E parentC corcheteA C corcheteC .)
    PRINT           reduce using rule 30 (SC -> WHILE parentA E parentC corcheteA C corcheteC .)
    INPUT           reduce using rule 30 (SC -> WHILE parentA E parentC corcheteA C corcheteC .)
    RETURN          reduce using rule 30 (SC -> WHILE parentA E parentC corcheteA C corcheteC .)
    $end            reduce using rule 30 (SC -> WHILE parentA E parentC corcheteA C corcheteC .)
    corcheteC       reduce using rule 30 (SC -> WHILE parentA E parentC corcheteA C corcheteC .)


state 92

    (16) C -> D C .

    corcheteC       reduce using rule 16 (C -> D C .)


state 93

    (9) F -> FUNCTION T1 id parentA A parentC corcheteA . C corcheteC
    (16) C -> . D C
    (17) C -> . SC
    (5) D -> . VAR T id puntcoma
    (30) SC -> . WHILE parentA E parentC corcheteA C corcheteC
    (31) SC -> . IF parentA E parentC S
    (32) SC -> . S
    (18) S -> . id igual E puntcoma
    (19) S -> . id asig E puntcoma
    (20) S -> . PRINT parentA E parentC puntcoma
    (21) S -> . INPUT parentA E parentC puntcoma
    (22) S -> . id parentA L parentC puntcoma
    (23) S -> . RETURN X

    VAR             shift and go to state 11
    WHILE           shift and go to state 1
    IF              shift and go to state 13
    id              shift and go to state 4
    PRINT           shift and go to state 2
    INPUT           shift and go to state 12
    RETURN          shift and go to state 3

    C                              shift and go to state 97
    D                              shift and go to state 86
    S                              shift and go to state 10
    SC                             shift and go to state 87

state 94

    (13) A -> T id A1 .

    parentC         reduce using rule 13 (A -> T id A1 .)


state 95

    (15) A1 -> coma . T id A1
    (6) T -> . INT
    (7) T -> . STRING
    (8) T -> . BOOLEAN

    INT             shift and go to state 31
    STRING          shift and go to state 30
    BOOLEAN         shift and go to state 33

    T                              shift and go to state 98

state 96

    (14) A1 -> empty .

    parentC         reduce using rule 14 (A1 -> empty .)


state 97

    (9) F -> FUNCTION T1 id parentA A parentC corcheteA C . corcheteC

    corcheteC       shift and go to state 99


state 98

    (15) A1 -> coma T . id A1

    id              shift and go to state 100


state 99

    (9) F -> FUNCTION T1 id parentA A parentC corcheteA C corcheteC .

    VAR             reduce using rule 9 (F -> FUNCTION T1 id parentA A parentC corcheteA C corcheteC .)
    FUNCTION        reduce using rule 9 (F -> FUNCTION T1 id parentA A parentC corcheteA C corcheteC .)
    WHILE           reduce using rule 9 (F -> FUNCTION T1 id parentA A parentC corcheteA C corcheteC .)
    IF              reduce using rule 9 (F -> FUNCTION T1 id parentA A parentC corcheteA C corcheteC .)
    id              reduce using rule 9 (F -> FUNCTION T1 id parentA A parentC corcheteA C corcheteC .)
    PRINT           reduce using rule 9 (F -> FUNCTION T1 id parentA A parentC corcheteA C corcheteC .)
    INPUT           reduce using rule 9 (F -> FUNCTION T1 id parentA A parentC corcheteA C corcheteC .)
    RETURN          reduce using rule 9 (F -> FUNCTION T1 id parentA A parentC corcheteA C corcheteC .)
    $end            reduce using rule 9 (F -> FUNCTION T1 id parentA A parentC corcheteA C corcheteC .)


state 100

    (15) A1 -> coma T id . A1
    (14) A1 -> . empty
    (15) A1 -> . coma T id A1
    (44) empty -> .

    coma            shift and go to state 95
    parentC         reduce using rule 44 (empty -> .)

    A1                             shift and go to state 101
    empty                          shift and go to state 96

state 101

    (15) A1 -> coma T id A1 .

    parentC         reduce using rule 15 (A1 -> coma T id A1 .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for id in state 3 resolved as shift
